
sample_Usart3_Usart2_Queue_RingBuffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004228  08004228  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004228  08004228  00014228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004230  08004230  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004234  08004234  00014234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000250  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c0  200002c0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b69c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e1  00000000  00000000  0002b73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002d820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000848  00000000  00000000  0002e150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024166  00000000  00000000  0002e998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c966  00000000  00000000  00052afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8522  00000000  00000000  0005f464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137986  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000278c  00000000  00000000  001379d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004190 	.word	0x08004190

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004190 	.word	0x08004190

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
 80005ae:	4b7c      	ldr	r3, [pc, #496]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a7b      	ldr	r2, [pc, #492]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b79      	ldr	r3, [pc, #484]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	4b75      	ldr	r3, [pc, #468]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a74      	ldr	r2, [pc, #464]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b72      	ldr	r3, [pc, #456]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b6e      	ldr	r3, [pc, #440]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a6d      	ldr	r2, [pc, #436]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b6b      	ldr	r3, [pc, #428]	; (80007a0 <MX_GPIO_Init+0x20c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b67      	ldr	r3, [pc, #412]	; (80007a0 <MX_GPIO_Init+0x20c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a66      	ldr	r2, [pc, #408]	; (80007a0 <MX_GPIO_Init+0x20c>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b64      	ldr	r3, [pc, #400]	; (80007a0 <MX_GPIO_Init+0x20c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b60      	ldr	r3, [pc, #384]	; (80007a0 <MX_GPIO_Init+0x20c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a5f      	ldr	r2, [pc, #380]	; (80007a0 <MX_GPIO_Init+0x20c>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b5d      	ldr	r3, [pc, #372]	; (80007a0 <MX_GPIO_Init+0x20c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b59      	ldr	r3, [pc, #356]	; (80007a0 <MX_GPIO_Init+0x20c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a58      	ldr	r2, [pc, #352]	; (80007a0 <MX_GPIO_Init+0x20c>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b56      	ldr	r3, [pc, #344]	; (80007a0 <MX_GPIO_Init+0x20c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f244 0181 	movw	r1, #16513	; 0x4081
 8000658:	4852      	ldr	r0, [pc, #328]	; (80007a4 <MX_GPIO_Init+0x210>)
 800065a:	f001 f8b3 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	4851      	ldr	r0, [pc, #324]	; (80007a8 <MX_GPIO_Init+0x214>)
 8000664:	f001 f8ae 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	484b      	ldr	r0, [pc, #300]	; (80007ac <MX_GPIO_Init+0x218>)
 8000680:	f000 fef4 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000684:	2332      	movs	r3, #50	; 0x32
 8000686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000694:	230b      	movs	r3, #11
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4619      	mov	r1, r3
 800069e:	4843      	ldr	r0, [pc, #268]	; (80007ac <MX_GPIO_Init+0x218>)
 80006a0:	f000 fee4 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006a4:	2386      	movs	r3, #134	; 0x86
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b4:	230b      	movs	r3, #11
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	483c      	ldr	r0, [pc, #240]	; (80007b0 <MX_GPIO_Init+0x21c>)
 80006c0:	f000 fed4 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006c4:	f244 0381 	movw	r3, #16513	; 0x4081
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	4831      	ldr	r0, [pc, #196]	; (80007a4 <MX_GPIO_Init+0x210>)
 80006de:	f000 fec5 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f4:	230b      	movs	r3, #11
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4829      	ldr	r0, [pc, #164]	; (80007a4 <MX_GPIO_Init+0x210>)
 8000700:	f000 feb4 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000704:	2340      	movs	r3, #64	; 0x40
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	4823      	ldr	r0, [pc, #140]	; (80007a8 <MX_GPIO_Init+0x214>)
 800071c:	f000 fea6 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	481d      	ldr	r0, [pc, #116]	; (80007a8 <MX_GPIO_Init+0x214>)
 8000734:	f000 fe9a 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000738:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800074a:	230a      	movs	r3, #10
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4816      	ldr	r0, [pc, #88]	; (80007b0 <MX_GPIO_Init+0x21c>)
 8000756:	f000 fe89 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800075a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	4810      	ldr	r0, [pc, #64]	; (80007b0 <MX_GPIO_Init+0x21c>)
 8000770:	f000 fe7c 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000774:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000786:	230b      	movs	r3, #11
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_GPIO_Init+0x214>)
 8000792:	f000 fe6b 	bl	800146c <HAL_GPIO_Init>

}
 8000796:	bf00      	nop
 8000798:	3730      	adds	r7, #48	; 0x30
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40021800 	.word	0x40021800
 80007ac:	40020800 	.word	0x40020800
 80007b0:	40020000 	.word	0x40020000

080007b4 <HAL_UART_RxCpltCallback>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <HAL_UART_RxCpltCallback+0x7c>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d108      	bne.n	80007d8 <HAL_UART_RxCpltCallback+0x24>
		{
			push(&usart3_Data);
 80007c6:	481b      	ldr	r0, [pc, #108]	; (8000834 <HAL_UART_RxCpltCallback+0x80>)
 80007c8:	f000 fb6e 	bl	8000ea8 <push>
			HAL_UART_Receive_IT(&huart3, &usart3_Data.rxCh, 1);
 80007cc:	2201      	movs	r2, #1
 80007ce:	4919      	ldr	r1, [pc, #100]	; (8000834 <HAL_UART_RxCpltCallback+0x80>)
 80007d0:	4819      	ldr	r0, [pc, #100]	; (8000838 <HAL_UART_RxCpltCallback+0x84>)
 80007d2:	f002 f892 	bl	80028fa <HAL_UART_Receive_IT>
			i++;
		}
		HAL_UART_Receive_IT(&huart2, &rx2ch, 1);

	}
}
 80007d6:	e026      	b.n	8000826 <HAL_UART_RxCpltCallback+0x72>
	else if(huart->Instance == USART2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_UART_RxCpltCallback+0x88>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d121      	bne.n	8000826 <HAL_UART_RxCpltCallback+0x72>
		rx2Data[i]=rx2ch;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <HAL_UART_RxCpltCallback+0x8c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_UART_RxCpltCallback+0x90>)
 80007e8:	7811      	ldrb	r1, [r2, #0]
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <HAL_UART_RxCpltCallback+0x94>)
 80007ec:	54d1      	strb	r1, [r2, r3]
		if(rx2Data[i]=='\r')
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <HAL_UART_RxCpltCallback+0x8c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a15      	ldr	r2, [pc, #84]	; (8000848 <HAL_UART_RxCpltCallback+0x94>)
 80007f4:	5cd3      	ldrb	r3, [r2, r3]
 80007f6:	2b0d      	cmp	r3, #13
 80007f8:	d10b      	bne.n	8000812 <HAL_UART_RxCpltCallback+0x5e>
			rx2Data[i]='\0';
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <HAL_UART_RxCpltCallback+0x8c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a12      	ldr	r2, [pc, #72]	; (8000848 <HAL_UART_RxCpltCallback+0x94>)
 8000800:	2100      	movs	r1, #0
 8000802:	54d1      	strb	r1, [r2, r3]
			rx2Flag=1;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <HAL_UART_RxCpltCallback+0x98>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
			i=0;
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_UART_RxCpltCallback+0x8c>)
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	e004      	b.n	800081c <HAL_UART_RxCpltCallback+0x68>
			i++;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <HAL_UART_RxCpltCallback+0x8c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a09      	ldr	r2, [pc, #36]	; (8000840 <HAL_UART_RxCpltCallback+0x8c>)
 800081a:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart2, &rx2ch, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	4909      	ldr	r1, [pc, #36]	; (8000844 <HAL_UART_RxCpltCallback+0x90>)
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <HAL_UART_RxCpltCallback+0x9c>)
 8000822:	f002 f86a 	bl	80028fa <HAL_UART_Receive_IT>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40004800 	.word	0x40004800
 8000834:	2000008c 	.word	0x2000008c
 8000838:	20000268 	.word	0x20000268
 800083c:	40004400 	.word	0x40004400
 8000840:	200001c4 	.word	0x200001c4
 8000844:	200001ec 	.word	0x200001ec
 8000848:	200001f0 	.word	0x200001f0
 800084c:	20000222 	.word	0x20000222
 8000850:	20000224 	.word	0x20000224

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08e      	sub	sp, #56	; 0x38
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f000 fbf1 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 f8b5 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f7ff fe97 	bl	8000594 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000866:	f000 fa51 	bl	8000d0c <MX_USART3_UART_Init>
  MX_RTC_Init();
 800086a:	f000 f927 	bl	8000abc <MX_RTC_Init>
  MX_USART2_UART_Init();
 800086e:	f000 fa23 	bl	8000cb8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  queData_Init(&usart3_Data);
 8000872:	4849      	ldr	r0, [pc, #292]	; (8000998 <main+0x144>)
 8000874:	f000 fb00 	bl	8000e78 <queData_Init>
  sprintf(sendBuf, "Start main()\r\n");
 8000878:	4948      	ldr	r1, [pc, #288]	; (800099c <main+0x148>)
 800087a:	4849      	ldr	r0, [pc, #292]	; (80009a0 <main+0x14c>)
 800087c:	f003 f808 	bl	8003890 <siprintf>
  Serial3_Send_String(sendBuf);
 8000880:	4847      	ldr	r0, [pc, #284]	; (80009a0 <main+0x14c>)
 8000882:	f000 fb75 	bl	8000f70 <Serial3_Send_String>
  Serial2_Send_String(sendBuf);
 8000886:	4846      	ldr	r0, [pc, #280]	; (80009a0 <main+0x14c>)
 8000888:	f000 fb9a 	bl	8000fc0 <Serial2_Send_String>
  HAL_UART_Receive_IT(&huart3, &usart3_Data.rxCh, 1);
 800088c:	2201      	movs	r2, #1
 800088e:	4942      	ldr	r1, [pc, #264]	; (8000998 <main+0x144>)
 8000890:	4844      	ldr	r0, [pc, #272]	; (80009a4 <main+0x150>)
 8000892:	f002 f832 	bl	80028fa <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rx2ch, 1);
 8000896:	2201      	movs	r2, #1
 8000898:	4943      	ldr	r1, [pc, #268]	; (80009a8 <main+0x154>)
 800089a:	4844      	ldr	r0, [pc, #272]	; (80009ac <main+0x158>)
 800089c:	f002 f82d 	bl	80028fa <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(isEmpty(&usart3_Data)==0)
 80008a0:	483d      	ldr	r0, [pc, #244]	; (8000998 <main+0x144>)
 80008a2:	f000 fb3f 	bl	8000f24 <isEmpty>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d12e      	bne.n	800090a <main+0xb6>
	  {
		  sendBuf[idx]=pop(&usart3_Data);
 80008ac:	483a      	ldr	r0, [pc, #232]	; (8000998 <main+0x144>)
 80008ae:	f000 fb1a 	bl	8000ee6 <pop>
 80008b2:	4601      	mov	r1, r0
 80008b4:	4b3e      	ldr	r3, [pc, #248]	; (80009b0 <main+0x15c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	b2c9      	uxtb	r1, r1
 80008bc:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <main+0x14c>)
 80008be:	5499      	strb	r1, [r3, r2]
		  if(sendBuf[idx]=='\r'||sendBuf[idx]=='\n'||idx>=50)
 80008c0:	4b3b      	ldr	r3, [pc, #236]	; (80009b0 <main+0x15c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b36      	ldr	r3, [pc, #216]	; (80009a0 <main+0x14c>)
 80008c8:	5c9b      	ldrb	r3, [r3, r2]
 80008ca:	2b0d      	cmp	r3, #13
 80008cc:	d00a      	beq.n	80008e4 <main+0x90>
 80008ce:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <main+0x15c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b32      	ldr	r3, [pc, #200]	; (80009a0 <main+0x14c>)
 80008d6:	5c9b      	ldrb	r3, [r3, r2]
 80008d8:	2b0a      	cmp	r3, #10
 80008da:	d003      	beq.n	80008e4 <main+0x90>
 80008dc:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <main+0x15c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b31      	cmp	r3, #49	; 0x31
 80008e2:	d90c      	bls.n	80008fe <main+0xaa>
		  {
			  sendBuf[idx]='\0';
 80008e4:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <main+0x15c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <main+0x14c>)
 80008ec:	2100      	movs	r1, #0
 80008ee:	5499      	strb	r1, [r3, r2]
			  idx=0;
 80008f0:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <main+0x15c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
			  txFlag=1;
 80008f6:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <main+0x160>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	e005      	b.n	800090a <main+0xb6>
		  }
		  else
		  {
			  idx++;
 80008fe:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <main+0x15c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	3301      	adds	r3, #1
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <main+0x15c>)
 8000908:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if(txFlag)
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <main+0x160>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d01d      	beq.n	800094e <main+0xfa>
	  {
		  char temp[50]={0, };
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	222e      	movs	r2, #46	; 0x2e
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f002 ffae 	bl	8003880 <memset>
		  idx=0;
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <main+0x15c>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
		  sprintf(temp, "rx3Data : %s\r\n",sendBuf);
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <main+0x14c>)
 800092e:	4922      	ldr	r1, [pc, #136]	; (80009b8 <main+0x164>)
 8000930:	4618      	mov	r0, r3
 8000932:	f002 ffad 	bl	8003890 <siprintf>
		  Serial3_Send_String(temp);
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fb19 	bl	8000f70 <Serial3_Send_String>
		  memset(sendBuf, 0, sizeof(sendBuf));
 800093e:	2232      	movs	r2, #50	; 0x32
 8000940:	2100      	movs	r1, #0
 8000942:	4817      	ldr	r0, [pc, #92]	; (80009a0 <main+0x14c>)
 8000944:	f002 ff9c 	bl	8003880 <memset>
		  txFlag=0;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <main+0x160>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
	  }
	  if(rx2Flag)
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <main+0x168>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0a4      	beq.n	80008a0 <main+0x4c>
	  {
		  	  char sendTemp[50]={0, };
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	222e      	movs	r2, #46	; 0x2e
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f002 ff8c 	bl	8003880 <memset>
	  		  sprintf(sendTemp, "rx2Data : %s\r\n", rx2Data);
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <main+0x16c>)
 800096c:	4915      	ldr	r1, [pc, #84]	; (80009c4 <main+0x170>)
 800096e:	4618      	mov	r0, r3
 8000970:	f002 ff8e 	bl	8003890 <siprintf>
	  		  Serial3_Send_String(sendTemp);
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fafa 	bl	8000f70 <Serial3_Send_String>
	  		  Serial2_Send_String(sendTemp);
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	4618      	mov	r0, r3
 8000980:	f000 fb1e 	bl	8000fc0 <Serial2_Send_String>
	  		  rx2Flag=0;
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <main+0x168>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
	  		  strncpy(rx2Data, "", 50);
 800098a:	2232      	movs	r2, #50	; 0x32
 800098c:	490e      	ldr	r1, [pc, #56]	; (80009c8 <main+0x174>)
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <main+0x16c>)
 8000990:	f002 ff9e 	bl	80038d0 <strncpy>
	  if(isEmpty(&usart3_Data)==0)
 8000994:	e784      	b.n	80008a0 <main+0x4c>
 8000996:	bf00      	nop
 8000998:	2000008c 	.word	0x2000008c
 800099c:	080041a8 	.word	0x080041a8
 80009a0:	20000190 	.word	0x20000190
 80009a4:	20000268 	.word	0x20000268
 80009a8:	200001ec 	.word	0x200001ec
 80009ac:	20000224 	.word	0x20000224
 80009b0:	200001c2 	.word	0x200001c2
 80009b4:	200001c3 	.word	0x200001c3
 80009b8:	080041b8 	.word	0x080041b8
 80009bc:	20000222 	.word	0x20000222
 80009c0:	200001f0 	.word	0x200001f0
 80009c4:	080041c8 	.word	0x080041c8
 80009c8:	080041d8 	.word	0x080041d8

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b094      	sub	sp, #80	; 0x50
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	2230      	movs	r2, #48	; 0x30
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 ff50 	bl	8003880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <SystemClock_Config+0xdc>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	4a2b      	ldr	r2, [pc, #172]	; (8000aa8 <SystemClock_Config+0xdc>)
 80009fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <SystemClock_Config+0xdc>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	4b26      	ldr	r3, [pc, #152]	; (8000aac <SystemClock_Config+0xe0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a25      	ldr	r2, [pc, #148]	; (8000aac <SystemClock_Config+0xe0>)
 8000a16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	4b23      	ldr	r3, [pc, #140]	; (8000aac <SystemClock_Config+0xe0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000a28:	2306      	movs	r3, #6
 8000a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a34:	2310      	movs	r3, #16
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a40:	2308      	movs	r3, #8
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a44:	23b4      	movs	r3, #180	; 0xb4
 8000a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a4c:	2307      	movs	r3, #7
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0320 	add.w	r3, r7, #32
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 ff1f 	bl	8001898 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a60:	f000 f826 	bl	8000ab0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a64:	f000 fec8 	bl	80017f8 <HAL_PWREx_EnableOverDrive>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a6e:	f000 f81f 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	230f      	movs	r3, #15
 8000a74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2302      	movs	r3, #2
 8000a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2105      	movs	r1, #5
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 f979 	bl	8001d88 <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a9c:	f000 f808 	bl	8000ab0 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3750      	adds	r7, #80	; 0x50
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_RTC_Init+0x44>)
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <MX_RTC_Init+0x48>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_RTC_Init+0x44>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_RTC_Init+0x44>)
 8000ace:	227f      	movs	r2, #127	; 0x7f
 8000ad0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_RTC_Init+0x44>)
 8000ad4:	22ff      	movs	r2, #255	; 0xff
 8000ad6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_RTC_Init+0x44>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_RTC_Init+0x44>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_RTC_Init+0x44>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_RTC_Init+0x44>)
 8000aec:	f001 fd2c 	bl	8002548 <HAL_RTC_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000af6:	f7ff ffdb 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200001c8 	.word	0x200001c8
 8000b04:	40002800 	.word	0x40002800

08000b08 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	; 0x38
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	2230      	movs	r2, #48	; 0x30
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 feb1 	bl	8003880 <memset>
  if(rtcHandle->Instance==RTC)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <HAL_RTC_MspInit+0x4c>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d111      	bne.n	8000b4c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b28:	2320      	movs	r3, #32
 8000b2a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 fb46 	bl	80021c8 <HAL_RCCEx_PeriphCLKConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b42:	f7ff ffb5 	bl	8000ab0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <HAL_RTC_MspInit+0x50>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	3738      	adds	r7, #56	; 0x38
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40002800 	.word	0x40002800
 8000b58:	42470e3c 	.word	0x42470e3c

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 fa74 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <USART2_IRQHandler+0x10>)
 8000c06:	f001 fea9 	bl	800295c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000224 	.word	0x20000224

08000c14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <USART3_IRQHandler+0x10>)
 8000c1a:	f001 fe9f 	bl	800295c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000268 	.word	0x20000268

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c58:	f002 fde8 	bl	800382c <__errno>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	220c      	movs	r2, #12
 8000c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	e009      	b.n	8000c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <_sbrk+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20030000 	.word	0x20030000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	200001e8 	.word	0x200001e8
 8000c90:	200002c0 	.word	0x200002c0

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <MX_USART2_UART_Init+0x50>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	f001 fd24 	bl	800273c <HAL_UART_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cfa:	f7ff fed9 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000224 	.word	0x20000224
 8000d08:	40004400 	.word	0x40004400

08000d0c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <MX_USART3_UART_Init+0x50>)
 8000d14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d32:	220c      	movs	r2, #12
 8000d34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d44:	f001 fcfa 	bl	800273c <HAL_UART_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d4e:	f7ff feaf 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000268 	.word	0x20000268
 8000d5c:	40004800 	.word	0x40004800

08000d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08c      	sub	sp, #48	; 0x30
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a3a      	ldr	r2, [pc, #232]	; (8000e68 <HAL_UART_MspInit+0x108>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d134      	bne.n	8000dec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <HAL_UART_MspInit+0x10c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a38      	ldr	r2, [pc, #224]	; (8000e6c <HAL_UART_MspInit+0x10c>)
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <HAL_UART_MspInit+0x10c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <HAL_UART_MspInit+0x10c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a31      	ldr	r2, [pc, #196]	; (8000e6c <HAL_UART_MspInit+0x10c>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <HAL_UART_MspInit+0x10c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000dba:	2360      	movs	r3, #96	; 0x60
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4826      	ldr	r0, [pc, #152]	; (8000e70 <HAL_UART_MspInit+0x110>)
 8000dd6:	f000 fb49 	bl	800146c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2026      	movs	r0, #38	; 0x26
 8000de0:	f000 fa7b 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000de4:	2026      	movs	r0, #38	; 0x26
 8000de6:	f000 fa94 	bl	8001312 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dea:	e039      	b.n	8000e60 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a20      	ldr	r2, [pc, #128]	; (8000e74 <HAL_UART_MspInit+0x114>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d134      	bne.n	8000e60 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <HAL_UART_MspInit+0x10c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <HAL_UART_MspInit+0x10c>)
 8000e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_UART_MspInit+0x10c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_UART_MspInit+0x10c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0x10c>)
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_UART_MspInit+0x10c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e40:	2307      	movs	r3, #7
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4809      	ldr	r0, [pc, #36]	; (8000e70 <HAL_UART_MspInit+0x110>)
 8000e4c:	f000 fb0e 	bl	800146c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2027      	movs	r0, #39	; 0x27
 8000e56:	f000 fa40 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e5a:	2027      	movs	r0, #39	; 0x27
 8000e5c:	f000 fa59 	bl	8001312 <HAL_NVIC_EnableIRQ>
}
 8000e60:	bf00      	nop
 8000e62:	3730      	adds	r7, #48	; 0x30
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40004400 	.word	0x40004400
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020c00 	.word	0x40020c00
 8000e74:	40004800 	.word	0x40004800

08000e78 <queData_Init>:
  }
}

/* USER CODE BEGIN 1 */
void queData_Init(queData* pStruct)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	pStruct->head=0;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	705a      	strb	r2, [r3, #1]
	pStruct->tail=0;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	709a      	strb	r2, [r3, #2]
	pStruct->rxCh=0;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
	memset(pStruct->buffer, 0, sizeof(pStruct->buffer));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3303      	adds	r3, #3
 8000e96:	22ff      	movs	r2, #255	; 0xff
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 fcf0 	bl	8003880 <memset>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <push>:

void push(queData* pStruct)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	pStruct->buffer[pStruct->head] = pStruct->rxCh;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	785b      	ldrb	r3, [r3, #1]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	440b      	add	r3, r1
 8000ebe:	70da      	strb	r2, [r3, #3]
	pStruct->head++;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	785b      	ldrb	r3, [r3, #1]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	705a      	strb	r2, [r3, #1]

	if(pStruct->head>=BUFFER_SIZE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	785b      	ldrb	r3, [r3, #1]
 8000ed0:	2bff      	cmp	r3, #255	; 0xff
 8000ed2:	d102      	bne.n	8000eda <push+0x32>
		pStruct->head=0;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	705a      	strb	r2, [r3, #1]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <pop>:

uint8_t pop(queData* pStruct)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b085      	sub	sp, #20
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
	uint8_t data = pStruct->buffer[pStruct->tail];
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	789b      	ldrb	r3, [r3, #2]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	78db      	ldrb	r3, [r3, #3]
 8000efa:	73fb      	strb	r3, [r7, #15]

	pStruct->tail++;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	789b      	ldrb	r3, [r3, #2]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	709a      	strb	r2, [r3, #2]

	if(pStruct->tail>=BUFFER_SIZE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	789b      	ldrb	r3, [r3, #2]
 8000f0c:	2bff      	cmp	r3, #255	; 0xff
 8000f0e:	d102      	bne.n	8000f16 <pop+0x30>
		pStruct->tail=0;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	709a      	strb	r2, [r3, #2]

	return data;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <isEmpty>:

uint8_t isEmpty(queData* pStruct)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	return pStruct->head == pStruct->tail;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	785a      	ldrb	r2, [r3, #1]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	789b      	ldrb	r3, [r3, #2]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	bf0c      	ite	eq
 8000f38:	2301      	moveq	r3, #1
 8000f3a:	2300      	movne	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <Serial3_Send>:


void Serial3_Send(unsigned char c)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, &c, 1, 10);
 8000f56:	1df9      	adds	r1, r7, #7
 8000f58:	230a      	movs	r3, #10
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <Serial3_Send+0x20>)
 8000f5e:	f001 fc3a 	bl	80027d6 <HAL_UART_Transmit>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000268 	.word	0x20000268

08000f70 <Serial3_Send_String>:

void Serial3_Send_String(char* s)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 8000f78:	e007      	b.n	8000f8a <Serial3_Send_String+0x1a>
	{
		Serial3_Send((unsigned char)*s);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ffe4 	bl	8000f4c <Serial3_Send>
		s++;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3301      	adds	r3, #1
 8000f88:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f3      	bne.n	8000f7a <Serial3_Send_String+0xa>
	}
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <Serial2_Send>:

void Serial2_Send(unsigned char c)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &c, 1, 10);
 8000fa6:	1df9      	adds	r1, r7, #7
 8000fa8:	230a      	movs	r3, #10
 8000faa:	2201      	movs	r2, #1
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <Serial2_Send+0x20>)
 8000fae:	f001 fc12 	bl	80027d6 <HAL_UART_Transmit>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000224 	.word	0x20000224

08000fc0 <Serial2_Send_String>:

void Serial2_Send_String(char* s)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 8000fc8:	e007      	b.n	8000fda <Serial2_Send_String+0x1a>
	{
		Serial2_Send((unsigned char)*s);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffe4 	bl	8000f9c <Serial2_Send>
		s++;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f3      	bne.n	8000fca <Serial2_Send_String+0xa>
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001024 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ff2:	490e      	ldr	r1, [pc, #56]	; (800102c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001008:	4c0b      	ldr	r4, [pc, #44]	; (8001038 <LoopFillZerobss+0x26>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001016:	f7ff fe3d 	bl	8000c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101a:	f002 fc0d 	bl	8003838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fc19 	bl	8000854 <main>
  bx  lr    
 8001022:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001024:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001030:	08004238 	.word	0x08004238
  ldr r2, =_sbss
 8001034:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001038:	200002c0 	.word	0x200002c0

0800103c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <HAL_Init+0x40>)
 800104a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_Init+0x40>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_Init+0x40>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f92b 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f808 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff fd72 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023c00 	.word	0x40023c00

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x54>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f943 	bl	800132e <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 f90b 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <HAL_InitTick+0x5c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008
 8001108:	200002ac 	.word	0x200002ac

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200002ac 	.word	0x200002ac

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4907      	ldr	r1, [pc, #28]	; (80011c0 <__NVIC_EnableIRQ+0x38>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	; (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff29 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff3e 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff8e 	bl	8001218 <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5d 	bl	80011c4 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff31 	bl	8001188 <__NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa2 	bl	8001280 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff feda 	bl	800110c <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d008      	beq.n	8001378 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e052      	b.n	800141e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0216 	bic.w	r2, r2, #22
 8001386:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001396:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	2b00      	cmp	r3, #0
 800139e:	d103      	bne.n	80013a8 <HAL_DMA_Abort+0x62>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0208 	bic.w	r2, r2, #8
 80013b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0201 	bic.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c8:	e013      	b.n	80013f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ca:	f7ff fe9f 	bl	800110c <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d90c      	bls.n	80013f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2220      	movs	r2, #32
 80013dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2203      	movs	r2, #3
 80013e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e015      	b.n	800141e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1e4      	bne.n	80013ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001404:	223f      	movs	r2, #63	; 0x3f
 8001406:	409a      	lsls	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d004      	beq.n	8001444 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e00c      	b.n	800145e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2205      	movs	r2, #5
 8001448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	e177      	b.n	8001778 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001488:	2201      	movs	r2, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	f040 8166 	bne.w	8001772 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d005      	beq.n	80014be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d130      	bne.n	8001520 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	2203      	movs	r2, #3
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f4:	2201      	movs	r2, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 0201 	and.w	r2, r3, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b03      	cmp	r3, #3
 800152a:	d017      	beq.n	800155c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d123      	bne.n	80015b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3208      	adds	r2, #8
 80015aa:	69b9      	ldr	r1, [r7, #24]
 80015ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0203 	and.w	r2, r3, #3
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80c0 	beq.w	8001772 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b66      	ldr	r3, [pc, #408]	; (8001790 <HAL_GPIO_Init+0x324>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a65      	ldr	r2, [pc, #404]	; (8001790 <HAL_GPIO_Init+0x324>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <HAL_GPIO_Init+0x324>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800160e:	4a61      	ldr	r2, [pc, #388]	; (8001794 <HAL_GPIO_Init+0x328>)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a58      	ldr	r2, [pc, #352]	; (8001798 <HAL_GPIO_Init+0x32c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d037      	beq.n	80016aa <HAL_GPIO_Init+0x23e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a57      	ldr	r2, [pc, #348]	; (800179c <HAL_GPIO_Init+0x330>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d031      	beq.n	80016a6 <HAL_GPIO_Init+0x23a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a56      	ldr	r2, [pc, #344]	; (80017a0 <HAL_GPIO_Init+0x334>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d02b      	beq.n	80016a2 <HAL_GPIO_Init+0x236>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a55      	ldr	r2, [pc, #340]	; (80017a4 <HAL_GPIO_Init+0x338>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d025      	beq.n	800169e <HAL_GPIO_Init+0x232>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a54      	ldr	r2, [pc, #336]	; (80017a8 <HAL_GPIO_Init+0x33c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d01f      	beq.n	800169a <HAL_GPIO_Init+0x22e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a53      	ldr	r2, [pc, #332]	; (80017ac <HAL_GPIO_Init+0x340>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d019      	beq.n	8001696 <HAL_GPIO_Init+0x22a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a52      	ldr	r2, [pc, #328]	; (80017b0 <HAL_GPIO_Init+0x344>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d013      	beq.n	8001692 <HAL_GPIO_Init+0x226>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a51      	ldr	r2, [pc, #324]	; (80017b4 <HAL_GPIO_Init+0x348>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d00d      	beq.n	800168e <HAL_GPIO_Init+0x222>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a50      	ldr	r2, [pc, #320]	; (80017b8 <HAL_GPIO_Init+0x34c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d007      	beq.n	800168a <HAL_GPIO_Init+0x21e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4f      	ldr	r2, [pc, #316]	; (80017bc <HAL_GPIO_Init+0x350>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d101      	bne.n	8001686 <HAL_GPIO_Init+0x21a>
 8001682:	2309      	movs	r3, #9
 8001684:	e012      	b.n	80016ac <HAL_GPIO_Init+0x240>
 8001686:	230a      	movs	r3, #10
 8001688:	e010      	b.n	80016ac <HAL_GPIO_Init+0x240>
 800168a:	2308      	movs	r3, #8
 800168c:	e00e      	b.n	80016ac <HAL_GPIO_Init+0x240>
 800168e:	2307      	movs	r3, #7
 8001690:	e00c      	b.n	80016ac <HAL_GPIO_Init+0x240>
 8001692:	2306      	movs	r3, #6
 8001694:	e00a      	b.n	80016ac <HAL_GPIO_Init+0x240>
 8001696:	2305      	movs	r3, #5
 8001698:	e008      	b.n	80016ac <HAL_GPIO_Init+0x240>
 800169a:	2304      	movs	r3, #4
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x240>
 800169e:	2303      	movs	r3, #3
 80016a0:	e004      	b.n	80016ac <HAL_GPIO_Init+0x240>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_Init+0x240>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_Init+0x240>
 80016aa:	2300      	movs	r3, #0
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	f002 0203 	and.w	r2, r2, #3
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	4093      	lsls	r3, r2
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016bc:	4935      	ldr	r1, [pc, #212]	; (8001794 <HAL_GPIO_Init+0x328>)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <HAL_GPIO_Init+0x354>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ee:	4a34      	ldr	r2, [pc, #208]	; (80017c0 <HAL_GPIO_Init+0x354>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f4:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <HAL_GPIO_Init+0x354>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001718:	4a29      	ldr	r2, [pc, #164]	; (80017c0 <HAL_GPIO_Init+0x354>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800171e:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <HAL_GPIO_Init+0x354>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001742:	4a1f      	ldr	r2, [pc, #124]	; (80017c0 <HAL_GPIO_Init+0x354>)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <HAL_GPIO_Init+0x354>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <HAL_GPIO_Init+0x354>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3301      	adds	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	2b0f      	cmp	r3, #15
 800177c:	f67f ae84 	bls.w	8001488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40013800 	.word	0x40013800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020400 	.word	0x40020400
 80017a0:	40020800 	.word	0x40020800
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40021400 	.word	0x40021400
 80017b0:	40021800 	.word	0x40021800
 80017b4:	40021c00 	.word	0x40021c00
 80017b8:	40022000 	.word	0x40022000
 80017bc:	40022400 	.word	0x40022400
 80017c0:	40013c00 	.word	0x40013c00

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e0:	e003      	b.n	80017ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	041a      	lsls	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	619a      	str	r2, [r3, #24]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_PWREx_EnableOverDrive+0x90>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <HAL_PWREx_EnableOverDrive+0x90>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <HAL_PWREx_EnableOverDrive+0x90>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_PWREx_EnableOverDrive+0x94>)
 8001820:	2201      	movs	r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001824:	f7ff fc72 	bl	800110c <HAL_GetTick>
 8001828:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800182a:	e009      	b.n	8001840 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800182c:	f7ff fc6e 	bl	800110c <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800183a:	d901      	bls.n	8001840 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e01f      	b.n	8001880 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_PWREx_EnableOverDrive+0x98>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184c:	d1ee      	bne.n	800182c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001850:	2201      	movs	r2, #1
 8001852:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001854:	f7ff fc5a 	bl	800110c <HAL_GetTick>
 8001858:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800185a:	e009      	b.n	8001870 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800185c:	f7ff fc56 	bl	800110c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800186a:	d901      	bls.n	8001870 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e007      	b.n	8001880 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <HAL_PWREx_EnableOverDrive+0x98>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800187c:	d1ee      	bne.n	800185c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	420e0040 	.word	0x420e0040
 8001890:	40007000 	.word	0x40007000
 8001894:	420e0044 	.word	0x420e0044

08001898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e267      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d075      	beq.n	80019a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018b6:	4b88      	ldr	r3, [pc, #544]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d00c      	beq.n	80018dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c2:	4b85      	ldr	r3, [pc, #532]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d112      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ce:	4b82      	ldr	r3, [pc, #520]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018da:	d10b      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	4b7e      	ldr	r3, [pc, #504]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d05b      	beq.n	80019a0 <HAL_RCC_OscConfig+0x108>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d157      	bne.n	80019a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e242      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fc:	d106      	bne.n	800190c <HAL_RCC_OscConfig+0x74>
 80018fe:	4b76      	ldr	r3, [pc, #472]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a75      	ldr	r2, [pc, #468]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e01d      	b.n	8001948 <HAL_RCC_OscConfig+0xb0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x98>
 8001916:	4b70      	ldr	r3, [pc, #448]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a6f      	ldr	r2, [pc, #444]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b6d      	ldr	r3, [pc, #436]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a6c      	ldr	r2, [pc, #432]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0xb0>
 8001930:	4b69      	ldr	r3, [pc, #420]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a68      	ldr	r2, [pc, #416]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b66      	ldr	r3, [pc, #408]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a65      	ldr	r2, [pc, #404]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff fbdc 	bl	800110c <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff fbd8 	bl	800110c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e207      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0xc0>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fbc8 	bl	800110c <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff fbc4 	bl	800110c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1f3      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	4b51      	ldr	r3, [pc, #324]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0xe8>
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d063      	beq.n	8001a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ae:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ba:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d11c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c6:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_RCC_OscConfig+0x152>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e1c7      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ea:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4937      	ldr	r1, [pc, #220]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	e03a      	b.n	8001a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d020      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a08:	4b34      	ldr	r3, [pc, #208]	; (8001adc <HAL_RCC_OscConfig+0x244>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fb7d 	bl	800110c <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff fb79 	bl	800110c <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e1a8      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4925      	ldr	r1, [pc, #148]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e015      	b.n	8001a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <HAL_RCC_OscConfig+0x244>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fb5c 	bl	800110c <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff fb58 	bl	800110c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e187      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d036      	beq.n	8001af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d016      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_RCC_OscConfig+0x248>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff fb3c 	bl	800110c <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fb38 	bl	800110c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e167      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x200>
 8001ab6:	e01b      	b.n	8001af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_RCC_OscConfig+0x248>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7ff fb25 	bl	800110c <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	e00e      	b.n	8001ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac6:	f7ff fb21 	bl	800110c <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d907      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e150      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	42470000 	.word	0x42470000
 8001ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	4b88      	ldr	r3, [pc, #544]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1ea      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 8097 	beq.w	8001c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b02:	4b81      	ldr	r3, [pc, #516]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10f      	bne.n	8001b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b7d      	ldr	r3, [pc, #500]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a7c      	ldr	r2, [pc, #496]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b7a      	ldr	r3, [pc, #488]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	4b77      	ldr	r3, [pc, #476]	; (8001d0c <HAL_RCC_OscConfig+0x474>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3a:	4b74      	ldr	r3, [pc, #464]	; (8001d0c <HAL_RCC_OscConfig+0x474>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a73      	ldr	r2, [pc, #460]	; (8001d0c <HAL_RCC_OscConfig+0x474>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b46:	f7ff fae1 	bl	800110c <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4e:	f7ff fadd 	bl	800110c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e10c      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <HAL_RCC_OscConfig+0x474>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x2ea>
 8001b74:	4b64      	ldr	r3, [pc, #400]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a63      	ldr	r2, [pc, #396]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	e01c      	b.n	8001bbc <HAL_RCC_OscConfig+0x324>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x30c>
 8001b8a:	4b5f      	ldr	r3, [pc, #380]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	4a5e      	ldr	r2, [pc, #376]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6713      	str	r3, [r2, #112]	; 0x70
 8001b96:	4b5c      	ldr	r3, [pc, #368]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	4a5b      	ldr	r2, [pc, #364]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0x324>
 8001ba4:	4b58      	ldr	r3, [pc, #352]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba8:	4a57      	ldr	r2, [pc, #348]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb0:	4b55      	ldr	r3, [pc, #340]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb4:	4a54      	ldr	r2, [pc, #336]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001bb6:	f023 0304 	bic.w	r3, r3, #4
 8001bba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d015      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff faa2 	bl	800110c <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fa9e 	bl	800110c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0cb      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be2:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0ee      	beq.n	8001bcc <HAL_RCC_OscConfig+0x334>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fa8c 	bl	800110c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fa88 	bl	800110c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0b5      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1ee      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d105      	bne.n	8001c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c20:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	4a38      	ldr	r2, [pc, #224]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a1 	beq.w	8001d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c36:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d05c      	beq.n	8001cfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d141      	bne.n	8001cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <HAL_RCC_OscConfig+0x478>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fa5c 	bl	800110c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c58:	f7ff fa58 	bl	800110c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e087      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	491b      	ldr	r1, [pc, #108]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_RCC_OscConfig+0x478>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fa31 	bl	800110c <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cae:	f7ff fa2d 	bl	800110c <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e05c      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x416>
 8001ccc:	e054      	b.n	8001d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_RCC_OscConfig+0x478>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fa1a 	bl	800110c <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff fa16 	bl	800110c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e045      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x444>
 8001cfa:	e03d      	b.n	8001d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e038      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40007000 	.word	0x40007000
 8001d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_RCC_OscConfig+0x4ec>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d028      	beq.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d121      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d11a      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d44:	4013      	ands	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d111      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	085b      	lsrs	r3, r3, #1
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800

08001d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0cc      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b68      	ldr	r3, [pc, #416]	; (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d90c      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b65      	ldr	r3, [pc, #404]	; (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b63      	ldr	r3, [pc, #396]	; (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0b8      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ddc:	4b59      	ldr	r3, [pc, #356]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4a58      	ldr	r2, [pc, #352]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df4:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4a52      	ldr	r2, [pc, #328]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e00:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	494d      	ldr	r1, [pc, #308]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d044      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d119      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e07f      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d003      	beq.n	8001e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e46:	4b3f      	ldr	r3, [pc, #252]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e06f      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e067      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e66:	4b37      	ldr	r3, [pc, #220]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f023 0203 	bic.w	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4934      	ldr	r1, [pc, #208]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e78:	f7ff f948 	bl	800110c <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f7ff f944 	bl	800110c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e04f      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 020c 	and.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1eb      	bne.n	8001e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d20c      	bcs.n	8001ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e032      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4916      	ldr	r1, [pc, #88]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	490e      	ldr	r1, [pc, #56]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f0e:	f000 f821 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001f12:	4602      	mov	r2, r0
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	490a      	ldr	r1, [pc, #40]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	5ccb      	ldrb	r3, [r1, r3]
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f8a8 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023c00 	.word	0x40023c00
 8001f44:	40023800 	.word	0x40023800
 8001f48:	080041dc 	.word	0x080041dc
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000004 	.word	0x20000004

08001f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f58:	b094      	sub	sp, #80	; 0x50
 8001f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f60:	2300      	movs	r3, #0
 8001f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f64:	2300      	movs	r3, #0
 8001f66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f6c:	4b79      	ldr	r3, [pc, #484]	; (8002154 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d00d      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0x40>
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	f200 80e1 	bhi.w	8002140 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x34>
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f86:	e0db      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f88:	4b73      	ldr	r3, [pc, #460]	; (8002158 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f8c:	e0db      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f8e:	4b73      	ldr	r3, [pc, #460]	; (800215c <HAL_RCC_GetSysClockFreq+0x208>)
 8001f90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f92:	e0d8      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f94:	4b6f      	ldr	r3, [pc, #444]	; (8002154 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f9e:	4b6d      	ldr	r3, [pc, #436]	; (8002154 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d063      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001faa:	4b6a      	ldr	r3, [pc, #424]	; (8002154 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	099b      	lsrs	r3, r3, #6
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fc6:	4622      	mov	r2, r4
 8001fc8:	462b      	mov	r3, r5
 8001fca:	f04f 0000 	mov.w	r0, #0
 8001fce:	f04f 0100 	mov.w	r1, #0
 8001fd2:	0159      	lsls	r1, r3, #5
 8001fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fd8:	0150      	lsls	r0, r2, #5
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4621      	mov	r1, r4
 8001fe0:	1a51      	subs	r1, r2, r1
 8001fe2:	6139      	str	r1, [r7, #16]
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ff8:	4659      	mov	r1, fp
 8001ffa:	018b      	lsls	r3, r1, #6
 8001ffc:	4651      	mov	r1, sl
 8001ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002002:	4651      	mov	r1, sl
 8002004:	018a      	lsls	r2, r1, #6
 8002006:	4651      	mov	r1, sl
 8002008:	ebb2 0801 	subs.w	r8, r2, r1
 800200c:	4659      	mov	r1, fp
 800200e:	eb63 0901 	sbc.w	r9, r3, r1
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800201e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002026:	4690      	mov	r8, r2
 8002028:	4699      	mov	r9, r3
 800202a:	4623      	mov	r3, r4
 800202c:	eb18 0303 	adds.w	r3, r8, r3
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	462b      	mov	r3, r5
 8002034:	eb49 0303 	adc.w	r3, r9, r3
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002046:	4629      	mov	r1, r5
 8002048:	024b      	lsls	r3, r1, #9
 800204a:	4621      	mov	r1, r4
 800204c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002050:	4621      	mov	r1, r4
 8002052:	024a      	lsls	r2, r1, #9
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800205a:	2200      	movs	r2, #0
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
 800205e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002060:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002064:	f7fe f914 	bl	8000290 <__aeabi_uldivmod>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4613      	mov	r3, r2
 800206e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002070:	e058      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002072:	4b38      	ldr	r3, [pc, #224]	; (8002154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	2200      	movs	r2, #0
 800207a:	4618      	mov	r0, r3
 800207c:	4611      	mov	r1, r2
 800207e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002082:	623b      	str	r3, [r7, #32]
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
 8002088:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800208c:	4642      	mov	r2, r8
 800208e:	464b      	mov	r3, r9
 8002090:	f04f 0000 	mov.w	r0, #0
 8002094:	f04f 0100 	mov.w	r1, #0
 8002098:	0159      	lsls	r1, r3, #5
 800209a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800209e:	0150      	lsls	r0, r2, #5
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4641      	mov	r1, r8
 80020a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80020aa:	4649      	mov	r1, r9
 80020ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020c4:	ebb2 040a 	subs.w	r4, r2, sl
 80020c8:	eb63 050b 	sbc.w	r5, r3, fp
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	00eb      	lsls	r3, r5, #3
 80020d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020da:	00e2      	lsls	r2, r4, #3
 80020dc:	4614      	mov	r4, r2
 80020de:	461d      	mov	r5, r3
 80020e0:	4643      	mov	r3, r8
 80020e2:	18e3      	adds	r3, r4, r3
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	464b      	mov	r3, r9
 80020e8:	eb45 0303 	adc.w	r3, r5, r3
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020fa:	4629      	mov	r1, r5
 80020fc:	028b      	lsls	r3, r1, #10
 80020fe:	4621      	mov	r1, r4
 8002100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002104:	4621      	mov	r1, r4
 8002106:	028a      	lsls	r2, r1, #10
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210e:	2200      	movs	r2, #0
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	61fa      	str	r2, [r7, #28]
 8002114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002118:	f7fe f8ba 	bl	8000290 <__aeabi_uldivmod>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4613      	mov	r3, r2
 8002122:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	3301      	adds	r3, #1
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800213e:	e002      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_RCC_GetSysClockFreq+0x204>)
 8002142:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002148:	4618      	mov	r0, r3
 800214a:	3750      	adds	r7, #80	; 0x50
 800214c:	46bd      	mov	sp, r7
 800214e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	00f42400 	.word	0x00f42400
 800215c:	007a1200 	.word	0x007a1200

08002160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <HAL_RCC_GetHCLKFreq+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000000 	.word	0x20000000

08002178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800217c:	f7ff fff0 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 8002180:	4602      	mov	r2, r0
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	0a9b      	lsrs	r3, r3, #10
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	4903      	ldr	r1, [pc, #12]	; (800219c <HAL_RCC_GetPCLK1Freq+0x24>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800
 800219c:	080041ec 	.word	0x080041ec

080021a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021a4:	f7ff ffdc 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	0b5b      	lsrs	r3, r3, #13
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	4903      	ldr	r1, [pc, #12]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40023800 	.word	0x40023800
 80021c4:	080041ec 	.word	0x080041ec

080021c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10b      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d105      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d075      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021fc:	4b91      	ldr	r3, [pc, #580]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002202:	f7fe ff83 	bl	800110c <HAL_GetTick>
 8002206:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002208:	e008      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800220a:	f7fe ff7f 	bl	800110c <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e189      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800221c:	4b8a      	ldr	r3, [pc, #552]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f0      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d009      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	019a      	lsls	r2, r3, #6
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	071b      	lsls	r3, r3, #28
 8002240:	4981      	ldr	r1, [pc, #516]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01f      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002254:	4b7c      	ldr	r3, [pc, #496]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800225a:	0f1b      	lsrs	r3, r3, #28
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	019a      	lsls	r2, r3, #6
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	431a      	orrs	r2, r3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	071b      	lsls	r3, r3, #28
 8002274:	4974      	ldr	r1, [pc, #464]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800227c:	4b72      	ldr	r3, [pc, #456]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800227e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002282:	f023 021f 	bic.w	r2, r3, #31
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	3b01      	subs	r3, #1
 800228c:	496e      	ldr	r1, [pc, #440]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00d      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	019a      	lsls	r2, r3, #6
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	061b      	lsls	r3, r3, #24
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	071b      	lsls	r3, r3, #28
 80022b4:	4964      	ldr	r1, [pc, #400]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022bc:	4b61      	ldr	r3, [pc, #388]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022c2:	f7fe ff23 	bl	800110c <HAL_GetTick>
 80022c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80022ca:	f7fe ff1f 	bl	800110c <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e129      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022dc:	4b5a      	ldr	r3, [pc, #360]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d079      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002300:	4b52      	ldr	r3, [pc, #328]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002306:	f7fe ff01 	bl	800110c <HAL_GetTick>
 800230a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800230e:	f7fe fefd 	bl	800110c <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e107      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002320:	4b49      	ldr	r3, [pc, #292]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800232c:	d0ef      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d020      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800233a:	4b43      	ldr	r3, [pc, #268]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002340:	0f1b      	lsrs	r3, r3, #28
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	019a      	lsls	r2, r3, #6
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	061b      	lsls	r3, r3, #24
 8002354:	431a      	orrs	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	071b      	lsls	r3, r3, #28
 800235a:	493b      	ldr	r1, [pc, #236]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002362:	4b39      	ldr	r3, [pc, #228]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002368:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	3b01      	subs	r3, #1
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	4934      	ldr	r1, [pc, #208]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01e      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002388:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	0e1b      	lsrs	r3, r3, #24
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	019a      	lsls	r2, r3, #6
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	061b      	lsls	r3, r3, #24
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	071b      	lsls	r3, r3, #28
 80023a8:	4927      	ldr	r1, [pc, #156]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	4922      	ldr	r1, [pc, #136]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80023c6:	4b21      	ldr	r3, [pc, #132]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023cc:	f7fe fe9e 	bl	800110c <HAL_GetTick>
 80023d0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80023d4:	f7fe fe9a 	bl	800110c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e0a4      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023f2:	d1ef      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 808b 	beq.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002410:	6413      	str	r3, [r2, #64]	; 0x40
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800242a:	f7fe fe6f 	bl	800110c <HAL_GetTick>
 800242e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002430:	e010      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7fe fe6b 	bl	800110c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d909      	bls.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e075      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002444:	42470068 	.word	0x42470068
 8002448:	40023800 	.word	0x40023800
 800244c:	42470070 	.word	0x42470070
 8002450:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002454:	4b38      	ldr	r3, [pc, #224]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0e8      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002460:	4b36      	ldr	r3, [pc, #216]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002468:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d02f      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	429a      	cmp	r2, r3
 800247c:	d028      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800247e:	4b2f      	ldr	r3, [pc, #188]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002486:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002488:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800248e:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002494:	4a29      	ldr	r2, [pc, #164]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800249a:	4b28      	ldr	r3, [pc, #160]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d114      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fe fe31 	bl	800110c <HAL_GetTick>
 80024aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7fe fe2d 	bl	800110c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e035      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ee      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024dc:	d10d      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x332>
 80024de:	4b17      	ldr	r3, [pc, #92]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80024ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f2:	4912      	ldr	r1, [pc, #72]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]
 80024f8:	e005      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4a0f      	ldr	r2, [pc, #60]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002500:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002504:	6093      	str	r3, [r2, #8]
 8002506:	4b0d      	ldr	r3, [pc, #52]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002508:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002512:	490a      	ldr	r1, [pc, #40]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002514:	4313      	orrs	r3, r2
 8002516:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d004      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800252c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40007000 	.word	0x40007000
 800253c:	40023800 	.word	0x40023800
 8002540:	42470e40 	.word	0x42470e40
 8002544:	424711e0 	.word	0x424711e0

08002548 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e066      	b.n	800262c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7f5b      	ldrb	r3, [r3, #29]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe faca 	bl	8000b08 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	22ca      	movs	r2, #202	; 0xca
 8002580:	625a      	str	r2, [r3, #36]	; 0x24
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2253      	movs	r2, #83	; 0x53
 8002588:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f87a 	bl	8002684 <RTC_EnterInitMode>
 8002590:	4603      	mov	r3, r0
 8002592:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d12c      	bne.n	80025f4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80025a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6899      	ldr	r1, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	68d2      	ldr	r2, [r2, #12]
 80025d4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6919      	ldr	r1, [r3, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	041a      	lsls	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f881 	bl	80026f2 <RTC_ExitInitMode>
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d113      	bne.n	8002622 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	22ff      	movs	r2, #255	; 0xff
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800264e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002650:	f7fe fd5c 	bl	800110c <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002656:	e009      	b.n	800266c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002658:	f7fe fd58 	bl	800110c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002666:	d901      	bls.n	800266c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e007      	b.n	800267c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0ee      	beq.n	8002658 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d122      	bne.n	80026e8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026b2:	f7fe fd2b 	bl	800110c <HAL_GetTick>
 80026b6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80026b8:	e00c      	b.n	80026d4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026ba:	f7fe fd27 	bl	800110c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026c8:	d904      	bls.n	80026d4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2204      	movs	r2, #4
 80026ce:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <RTC_EnterInitMode+0x64>
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d1e8      	bne.n	80026ba <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800270c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ff89 	bl	8002634 <HAL_RTC_WaitForSynchro>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d004      	beq.n	8002732 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2204      	movs	r2, #4
 800272c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e03f      	b.n	80027ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fafc 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	; 0x24
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800277e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fddf 	bl	8003344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b08a      	sub	sp, #40	; 0x28
 80027da:	af02      	add	r7, sp, #8
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d17c      	bne.n	80028f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_UART_Transmit+0x2c>
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e075      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_UART_Transmit+0x3e>
 8002810:	2302      	movs	r3, #2
 8002812:	e06e      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2221      	movs	r2, #33	; 0x21
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800282a:	f7fe fc6f 	bl	800110c <HAL_GetTick>
 800282e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	88fa      	ldrh	r2, [r7, #6]
 800283a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002844:	d108      	bne.n	8002858 <HAL_UART_Transmit+0x82>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e003      	b.n	8002860 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002868:	e02a      	b.n	80028c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2200      	movs	r2, #0
 8002872:	2180      	movs	r1, #128	; 0x80
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fb1f 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e036      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10b      	bne.n	80028a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	3302      	adds	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	e007      	b.n	80028b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	3301      	adds	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1cf      	bne.n	800286a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2140      	movs	r1, #64	; 0x40
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 faef 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e006      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	4613      	mov	r3, r2
 8002906:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b20      	cmp	r3, #32
 8002912:	d11d      	bne.n	8002950 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_UART_Receive_IT+0x26>
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e016      	b.n	8002952 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_UART_Receive_IT+0x38>
 800292e:	2302      	movs	r3, #2
 8002930:	e00f      	b.n	8002952 <HAL_UART_Receive_IT+0x58>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	461a      	mov	r2, r3
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 fb24 	bl	8002f94 <UART_Start_Receive_IT>
 800294c:	4603      	mov	r3, r0
 800294e:	e000      	b.n	8002952 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002950:	2302      	movs	r3, #2
  }
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b0ba      	sub	sp, #232	; 0xe8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800298e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800299a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10f      	bne.n	80029c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d009      	beq.n	80029c2 <HAL_UART_IRQHandler+0x66>
 80029ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fc07 	bl	80031ce <UART_Receive_IT>
      return;
 80029c0:	e256      	b.n	8002e70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 80de 	beq.w	8002b88 <HAL_UART_IRQHandler+0x22c>
 80029cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80d1 	beq.w	8002b88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00b      	beq.n	8002a0a <HAL_UART_IRQHandler+0xae>
 80029f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00b      	beq.n	8002a2e <HAL_UART_IRQHandler+0xd2>
 8002a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f043 0202 	orr.w	r2, r3, #2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00b      	beq.n	8002a52 <HAL_UART_IRQHandler+0xf6>
 8002a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f043 0204 	orr.w	r2, r3, #4
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d011      	beq.n	8002a82 <HAL_UART_IRQHandler+0x126>
 8002a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f043 0208 	orr.w	r2, r3, #8
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 81ed 	beq.w	8002e66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_UART_IRQHandler+0x14e>
 8002a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fb92 	bl	80031ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab4:	2b40      	cmp	r3, #64	; 0x40
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x17a>
 8002ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d04f      	beq.n	8002b76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fa9a 	bl	8003010 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b40      	cmp	r3, #64	; 0x40
 8002ae8:	d141      	bne.n	8002b6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3314      	adds	r3, #20
 8002af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002af8:	e853 3f00 	ldrex	r3, [r3]
 8002afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3314      	adds	r3, #20
 8002b12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b26:	e841 2300 	strex	r3, r2, [r1]
 8002b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1d9      	bne.n	8002aea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d013      	beq.n	8002b66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	4a7d      	ldr	r2, [pc, #500]	; (8002d38 <HAL_UART_IRQHandler+0x3dc>)
 8002b44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fc6b 	bl	8001426 <HAL_DMA_Abort_IT>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b60:	4610      	mov	r0, r2
 8002b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b64:	e00e      	b.n	8002b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f990 	bl	8002e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6c:	e00a      	b.n	8002b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f98c 	bl	8002e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b74:	e006      	b.n	8002b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f988 	bl	8002e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b82:	e170      	b.n	8002e66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b84:	bf00      	nop
    return;
 8002b86:	e16e      	b.n	8002e66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	f040 814a 	bne.w	8002e26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8143 	beq.w	8002e26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 813c 	beq.w	8002e26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b40      	cmp	r3, #64	; 0x40
 8002bd0:	f040 80b4 	bne.w	8002d3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002be0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8140 	beq.w	8002e6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	f080 8139 	bcs.w	8002e6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0a:	f000 8088 	beq.w	8002d1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c1c:	e853 3f00 	ldrex	r3, [r3]
 8002c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c4a:	e841 2300 	strex	r3, r2, [r1]
 8002c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1d9      	bne.n	8002c0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3314      	adds	r3, #20
 8002c60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c64:	e853 3f00 	ldrex	r3, [r3]
 8002c68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3314      	adds	r3, #20
 8002c7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c8a:	e841 2300 	strex	r3, r2, [r1]
 8002c8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1e1      	bne.n	8002c5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3314      	adds	r3, #20
 8002c9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ca0:	e853 3f00 	ldrex	r3, [r3]
 8002ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	3314      	adds	r3, #20
 8002cb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cc2:	e841 2300 	strex	r3, r2, [r1]
 8002cc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1e3      	bne.n	8002c96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce6:	e853 3f00 	ldrex	r3, [r3]
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cee:	f023 0310 	bic.w	r3, r3, #16
 8002cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	330c      	adds	r3, #12
 8002cfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d00:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d08:	e841 2300 	strex	r3, r2, [r1]
 8002d0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1e3      	bne.n	8002cdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe fb14 	bl	8001346 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f8b6 	bl	8002ea0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d34:	e099      	b.n	8002e6a <HAL_UART_IRQHandler+0x50e>
 8002d36:	bf00      	nop
 8002d38:	080030d7 	.word	0x080030d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 808b 	beq.w	8002e6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 8086 	beq.w	8002e6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d86:	647a      	str	r2, [r7, #68]	; 0x44
 8002d88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d8e:	e841 2300 	strex	r3, r2, [r1]
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e3      	bne.n	8002d62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3314      	adds	r3, #20
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	623b      	str	r3, [r7, #32]
   return(result);
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3314      	adds	r3, #20
 8002dba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dbe:	633a      	str	r2, [r7, #48]	; 0x30
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc6:	e841 2300 	strex	r3, r2, [r1]
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1e3      	bne.n	8002d9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	e853 3f00 	ldrex	r3, [r3]
 8002dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0310 	bic.w	r3, r3, #16
 8002df6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	330c      	adds	r3, #12
 8002e00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e04:	61fa      	str	r2, [r7, #28]
 8002e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e08:	69b9      	ldr	r1, [r7, #24]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	e841 2300 	strex	r3, r2, [r1]
 8002e10:	617b      	str	r3, [r7, #20]
   return(result);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e3      	bne.n	8002de0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f83e 	bl	8002ea0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e24:	e023      	b.n	8002e6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_UART_IRQHandler+0x4ea>
 8002e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f95d 	bl	80030fe <UART_Transmit_IT>
    return;
 8002e44:	e014      	b.n	8002e70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00e      	beq.n	8002e70 <HAL_UART_IRQHandler+0x514>
 8002e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f99d 	bl	800319e <UART_EndTransmit_IT>
    return;
 8002e64:	e004      	b.n	8002e70 <HAL_UART_IRQHandler+0x514>
    return;
 8002e66:	bf00      	nop
 8002e68:	e002      	b.n	8002e70 <HAL_UART_IRQHandler+0x514>
      return;
 8002e6a:	bf00      	nop
 8002e6c:	e000      	b.n	8002e70 <HAL_UART_IRQHandler+0x514>
      return;
 8002e6e:	bf00      	nop
  }
}
 8002e70:	37e8      	adds	r7, #232	; 0xe8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop

08002e78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b090      	sub	sp, #64	; 0x40
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec8:	e050      	b.n	8002f6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d04c      	beq.n	8002f6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d007      	beq.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ed8:	f7fe f918 	bl	800110c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d241      	bcs.n	8002f6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f08:	637a      	str	r2, [r7, #52]	; 0x34
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f10:	e841 2300 	strex	r3, r2, [r1]
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1e5      	bne.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3314      	adds	r3, #20
 8002f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	e853 3f00 	ldrex	r3, [r3]
 8002f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3314      	adds	r3, #20
 8002f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f3c:	623a      	str	r2, [r7, #32]
 8002f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	69f9      	ldr	r1, [r7, #28]
 8002f42:	6a3a      	ldr	r2, [r7, #32]
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e5      	bne.n	8002f1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e00f      	b.n	8002f8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4013      	ands	r3, r2
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d09f      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3740      	adds	r7, #64	; 0x40
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	88fa      	ldrh	r2, [r7, #6]
 8002fb2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2222      	movs	r2, #34	; 0x22
 8002fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d007      	beq.n	8002fe2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0220 	orr.w	r2, r2, #32
 8003000:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003010:	b480      	push	{r7}
 8003012:	b095      	sub	sp, #84	; 0x54
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	330c      	adds	r3, #12
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003022:	e853 3f00 	ldrex	r3, [r3]
 8003026:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800302e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	330c      	adds	r3, #12
 8003036:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003038:	643a      	str	r2, [r7, #64]	; 0x40
 800303a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800303e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003040:	e841 2300 	strex	r3, r2, [r1]
 8003044:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e5      	bne.n	8003018 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3314      	adds	r3, #20
 8003052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	e853 3f00 	ldrex	r3, [r3]
 800305a:	61fb      	str	r3, [r7, #28]
   return(result);
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3314      	adds	r3, #20
 800306a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800306c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003074:	e841 2300 	strex	r3, r2, [r1]
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e5      	bne.n	800304c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	2b01      	cmp	r3, #1
 8003086:	d119      	bne.n	80030bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	330c      	adds	r3, #12
 800308e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	e853 3f00 	ldrex	r3, [r3]
 8003096:	60bb      	str	r3, [r7, #8]
   return(result);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f023 0310 	bic.w	r3, r3, #16
 800309e:	647b      	str	r3, [r7, #68]	; 0x44
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030a8:	61ba      	str	r2, [r7, #24]
 80030aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	6979      	ldr	r1, [r7, #20]
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	613b      	str	r3, [r7, #16]
   return(result);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e5      	bne.n	8003088 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030ca:	bf00      	nop
 80030cc:	3754      	adds	r7, #84	; 0x54
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7ff fecb 	bl	8002e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b21      	cmp	r3, #33	; 0x21
 8003110:	d13e      	bne.n	8003190 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311a:	d114      	bne.n	8003146 <UART_Transmit_IT+0x48>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d110      	bne.n	8003146 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003138:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	1c9a      	adds	r2, r3, #2
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	621a      	str	r2, [r3, #32]
 8003144:	e008      	b.n	8003158 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	1c59      	adds	r1, r3, #1
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6211      	str	r1, [r2, #32]
 8003150:	781a      	ldrb	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29b      	uxth	r3, r3
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	4619      	mov	r1, r3
 8003166:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10f      	bne.n	800318c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800317a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800318a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fe5a 	bl	8002e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b08c      	sub	sp, #48	; 0x30
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b22      	cmp	r3, #34	; 0x22
 80031e0:	f040 80ab 	bne.w	800333a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ec:	d117      	bne.n	800321e <UART_Receive_IT+0x50>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d113      	bne.n	800321e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	b29b      	uxth	r3, r3
 8003208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320c:	b29a      	uxth	r2, r3
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	1c9a      	adds	r2, r3, #2
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
 800321c:	e026      	b.n	800326c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003224:	2300      	movs	r3, #0
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003230:	d007      	beq.n	8003242 <UART_Receive_IT+0x74>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <UART_Receive_IT+0x82>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e008      	b.n	8003262 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800325c:	b2da      	uxtb	r2, r3
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29b      	uxth	r3, r3
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4619      	mov	r1, r3
 800327a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800327c:	2b00      	cmp	r3, #0
 800327e:	d15a      	bne.n	8003336 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0220 	bic.w	r2, r2, #32
 800328e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800329e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0201 	bic.w	r2, r2, #1
 80032ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d135      	bne.n	800332c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	330c      	adds	r3, #12
 80032cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	613b      	str	r3, [r7, #16]
   return(result);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f023 0310 	bic.w	r3, r3, #16
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	330c      	adds	r3, #12
 80032e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e6:	623a      	str	r2, [r7, #32]
 80032e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	69f9      	ldr	r1, [r7, #28]
 80032ec:	6a3a      	ldr	r2, [r7, #32]
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e5      	bne.n	80032c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b10      	cmp	r3, #16
 8003306:	d10a      	bne.n	800331e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003322:	4619      	mov	r1, r3
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff fdbb 	bl	8002ea0 <HAL_UARTEx_RxEventCallback>
 800332a:	e002      	b.n	8003332 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7fd fa41 	bl	80007b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e002      	b.n	800333c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e000      	b.n	800333c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800333a:	2302      	movs	r3, #2
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	3730      	adds	r7, #48	; 0x30
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003348:	b0c0      	sub	sp, #256	; 0x100
 800334a:	af00      	add	r7, sp, #0
 800334c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	68d9      	ldr	r1, [r3, #12]
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	ea40 0301 	orr.w	r3, r0, r1
 800336c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800336e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	431a      	orrs	r2, r3
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	431a      	orrs	r2, r3
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800339c:	f021 010c 	bic.w	r1, r1, #12
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033aa:	430b      	orrs	r3, r1
 80033ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033be:	6999      	ldr	r1, [r3, #24]
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	ea40 0301 	orr.w	r3, r0, r1
 80033ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b8f      	ldr	r3, [pc, #572]	; (8003610 <UART_SetConfig+0x2cc>)
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d005      	beq.n	80033e4 <UART_SetConfig+0xa0>
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	4b8d      	ldr	r3, [pc, #564]	; (8003614 <UART_SetConfig+0x2d0>)
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d104      	bne.n	80033ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033e4:	f7fe fedc 	bl	80021a0 <HAL_RCC_GetPCLK2Freq>
 80033e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033ec:	e003      	b.n	80033f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033ee:	f7fe fec3 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 80033f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003400:	f040 810c 	bne.w	800361c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003408:	2200      	movs	r2, #0
 800340a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800340e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003412:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003416:	4622      	mov	r2, r4
 8003418:	462b      	mov	r3, r5
 800341a:	1891      	adds	r1, r2, r2
 800341c:	65b9      	str	r1, [r7, #88]	; 0x58
 800341e:	415b      	adcs	r3, r3
 8003420:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003422:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003426:	4621      	mov	r1, r4
 8003428:	eb12 0801 	adds.w	r8, r2, r1
 800342c:	4629      	mov	r1, r5
 800342e:	eb43 0901 	adc.w	r9, r3, r1
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800343e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003446:	4690      	mov	r8, r2
 8003448:	4699      	mov	r9, r3
 800344a:	4623      	mov	r3, r4
 800344c:	eb18 0303 	adds.w	r3, r8, r3
 8003450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003454:	462b      	mov	r3, r5
 8003456:	eb49 0303 	adc.w	r3, r9, r3
 800345a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800346a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800346e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003472:	460b      	mov	r3, r1
 8003474:	18db      	adds	r3, r3, r3
 8003476:	653b      	str	r3, [r7, #80]	; 0x50
 8003478:	4613      	mov	r3, r2
 800347a:	eb42 0303 	adc.w	r3, r2, r3
 800347e:	657b      	str	r3, [r7, #84]	; 0x54
 8003480:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003484:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003488:	f7fc ff02 	bl	8000290 <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4b61      	ldr	r3, [pc, #388]	; (8003618 <UART_SetConfig+0x2d4>)
 8003492:	fba3 2302 	umull	r2, r3, r3, r2
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	011c      	lsls	r4, r3, #4
 800349a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034ac:	4642      	mov	r2, r8
 80034ae:	464b      	mov	r3, r9
 80034b0:	1891      	adds	r1, r2, r2
 80034b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80034b4:	415b      	adcs	r3, r3
 80034b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034bc:	4641      	mov	r1, r8
 80034be:	eb12 0a01 	adds.w	sl, r2, r1
 80034c2:	4649      	mov	r1, r9
 80034c4:	eb43 0b01 	adc.w	fp, r3, r1
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034dc:	4692      	mov	sl, r2
 80034de:	469b      	mov	fp, r3
 80034e0:	4643      	mov	r3, r8
 80034e2:	eb1a 0303 	adds.w	r3, sl, r3
 80034e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034ea:	464b      	mov	r3, r9
 80034ec:	eb4b 0303 	adc.w	r3, fp, r3
 80034f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003500:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003504:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003508:	460b      	mov	r3, r1
 800350a:	18db      	adds	r3, r3, r3
 800350c:	643b      	str	r3, [r7, #64]	; 0x40
 800350e:	4613      	mov	r3, r2
 8003510:	eb42 0303 	adc.w	r3, r2, r3
 8003514:	647b      	str	r3, [r7, #68]	; 0x44
 8003516:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800351a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800351e:	f7fc feb7 	bl	8000290 <__aeabi_uldivmod>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4611      	mov	r1, r2
 8003528:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <UART_SetConfig+0x2d4>)
 800352a:	fba3 2301 	umull	r2, r3, r3, r1
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2264      	movs	r2, #100	; 0x64
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	1acb      	subs	r3, r1, r3
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800353e:	4b36      	ldr	r3, [pc, #216]	; (8003618 <UART_SetConfig+0x2d4>)
 8003540:	fba3 2302 	umull	r2, r3, r3, r2
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800354c:	441c      	add	r4, r3
 800354e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003552:	2200      	movs	r2, #0
 8003554:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003558:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800355c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003560:	4642      	mov	r2, r8
 8003562:	464b      	mov	r3, r9
 8003564:	1891      	adds	r1, r2, r2
 8003566:	63b9      	str	r1, [r7, #56]	; 0x38
 8003568:	415b      	adcs	r3, r3
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800356c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003570:	4641      	mov	r1, r8
 8003572:	1851      	adds	r1, r2, r1
 8003574:	6339      	str	r1, [r7, #48]	; 0x30
 8003576:	4649      	mov	r1, r9
 8003578:	414b      	adcs	r3, r1
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003588:	4659      	mov	r1, fp
 800358a:	00cb      	lsls	r3, r1, #3
 800358c:	4651      	mov	r1, sl
 800358e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003592:	4651      	mov	r1, sl
 8003594:	00ca      	lsls	r2, r1, #3
 8003596:	4610      	mov	r0, r2
 8003598:	4619      	mov	r1, r3
 800359a:	4603      	mov	r3, r0
 800359c:	4642      	mov	r2, r8
 800359e:	189b      	adds	r3, r3, r2
 80035a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035a4:	464b      	mov	r3, r9
 80035a6:	460a      	mov	r2, r1
 80035a8:	eb42 0303 	adc.w	r3, r2, r3
 80035ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035c4:	460b      	mov	r3, r1
 80035c6:	18db      	adds	r3, r3, r3
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ca:	4613      	mov	r3, r2
 80035cc:	eb42 0303 	adc.w	r3, r2, r3
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035da:	f7fc fe59 	bl	8000290 <__aeabi_uldivmod>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <UART_SetConfig+0x2d4>)
 80035e4:	fba3 1302 	umull	r1, r3, r3, r2
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	2164      	movs	r1, #100	; 0x64
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	3332      	adds	r3, #50	; 0x32
 80035f6:	4a08      	ldr	r2, [pc, #32]	; (8003618 <UART_SetConfig+0x2d4>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	f003 0207 	and.w	r2, r3, #7
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4422      	add	r2, r4
 800360a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800360c:	e105      	b.n	800381a <UART_SetConfig+0x4d6>
 800360e:	bf00      	nop
 8003610:	40011000 	.word	0x40011000
 8003614:	40011400 	.word	0x40011400
 8003618:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800361c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003620:	2200      	movs	r2, #0
 8003622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003626:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800362a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800362e:	4642      	mov	r2, r8
 8003630:	464b      	mov	r3, r9
 8003632:	1891      	adds	r1, r2, r2
 8003634:	6239      	str	r1, [r7, #32]
 8003636:	415b      	adcs	r3, r3
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
 800363a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800363e:	4641      	mov	r1, r8
 8003640:	1854      	adds	r4, r2, r1
 8003642:	4649      	mov	r1, r9
 8003644:	eb43 0501 	adc.w	r5, r3, r1
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	00eb      	lsls	r3, r5, #3
 8003652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003656:	00e2      	lsls	r2, r4, #3
 8003658:	4614      	mov	r4, r2
 800365a:	461d      	mov	r5, r3
 800365c:	4643      	mov	r3, r8
 800365e:	18e3      	adds	r3, r4, r3
 8003660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003664:	464b      	mov	r3, r9
 8003666:	eb45 0303 	adc.w	r3, r5, r3
 800366a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800367a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800368a:	4629      	mov	r1, r5
 800368c:	008b      	lsls	r3, r1, #2
 800368e:	4621      	mov	r1, r4
 8003690:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003694:	4621      	mov	r1, r4
 8003696:	008a      	lsls	r2, r1, #2
 8003698:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800369c:	f7fc fdf8 	bl	8000290 <__aeabi_uldivmod>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4b60      	ldr	r3, [pc, #384]	; (8003828 <UART_SetConfig+0x4e4>)
 80036a6:	fba3 2302 	umull	r2, r3, r3, r2
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	011c      	lsls	r4, r3, #4
 80036ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036c0:	4642      	mov	r2, r8
 80036c2:	464b      	mov	r3, r9
 80036c4:	1891      	adds	r1, r2, r2
 80036c6:	61b9      	str	r1, [r7, #24]
 80036c8:	415b      	adcs	r3, r3
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036d0:	4641      	mov	r1, r8
 80036d2:	1851      	adds	r1, r2, r1
 80036d4:	6139      	str	r1, [r7, #16]
 80036d6:	4649      	mov	r1, r9
 80036d8:	414b      	adcs	r3, r1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036e8:	4659      	mov	r1, fp
 80036ea:	00cb      	lsls	r3, r1, #3
 80036ec:	4651      	mov	r1, sl
 80036ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036f2:	4651      	mov	r1, sl
 80036f4:	00ca      	lsls	r2, r1, #3
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	4642      	mov	r2, r8
 80036fe:	189b      	adds	r3, r3, r2
 8003700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003704:	464b      	mov	r3, r9
 8003706:	460a      	mov	r2, r1
 8003708:	eb42 0303 	adc.w	r3, r2, r3
 800370c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	67bb      	str	r3, [r7, #120]	; 0x78
 800371a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003728:	4649      	mov	r1, r9
 800372a:	008b      	lsls	r3, r1, #2
 800372c:	4641      	mov	r1, r8
 800372e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003732:	4641      	mov	r1, r8
 8003734:	008a      	lsls	r2, r1, #2
 8003736:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800373a:	f7fc fda9 	bl	8000290 <__aeabi_uldivmod>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4b39      	ldr	r3, [pc, #228]	; (8003828 <UART_SetConfig+0x4e4>)
 8003744:	fba3 1302 	umull	r1, r3, r3, r2
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	2164      	movs	r1, #100	; 0x64
 800374c:	fb01 f303 	mul.w	r3, r1, r3
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	3332      	adds	r3, #50	; 0x32
 8003756:	4a34      	ldr	r2, [pc, #208]	; (8003828 <UART_SetConfig+0x4e4>)
 8003758:	fba2 2303 	umull	r2, r3, r2, r3
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003762:	441c      	add	r4, r3
 8003764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003768:	2200      	movs	r2, #0
 800376a:	673b      	str	r3, [r7, #112]	; 0x70
 800376c:	677a      	str	r2, [r7, #116]	; 0x74
 800376e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003772:	4642      	mov	r2, r8
 8003774:	464b      	mov	r3, r9
 8003776:	1891      	adds	r1, r2, r2
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	415b      	adcs	r3, r3
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003782:	4641      	mov	r1, r8
 8003784:	1851      	adds	r1, r2, r1
 8003786:	6039      	str	r1, [r7, #0]
 8003788:	4649      	mov	r1, r9
 800378a:	414b      	adcs	r3, r1
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800379a:	4659      	mov	r1, fp
 800379c:	00cb      	lsls	r3, r1, #3
 800379e:	4651      	mov	r1, sl
 80037a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037a4:	4651      	mov	r1, sl
 80037a6:	00ca      	lsls	r2, r1, #3
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	4603      	mov	r3, r0
 80037ae:	4642      	mov	r2, r8
 80037b0:	189b      	adds	r3, r3, r2
 80037b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037b4:	464b      	mov	r3, r9
 80037b6:	460a      	mov	r2, r1
 80037b8:	eb42 0303 	adc.w	r3, r2, r3
 80037bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	663b      	str	r3, [r7, #96]	; 0x60
 80037c8:	667a      	str	r2, [r7, #100]	; 0x64
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037d6:	4649      	mov	r1, r9
 80037d8:	008b      	lsls	r3, r1, #2
 80037da:	4641      	mov	r1, r8
 80037dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e0:	4641      	mov	r1, r8
 80037e2:	008a      	lsls	r2, r1, #2
 80037e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037e8:	f7fc fd52 	bl	8000290 <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <UART_SetConfig+0x4e4>)
 80037f2:	fba3 1302 	umull	r1, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2164      	movs	r1, #100	; 0x64
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	3332      	adds	r3, #50	; 0x32
 8003804:	4a08      	ldr	r2, [pc, #32]	; (8003828 <UART_SetConfig+0x4e4>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4422      	add	r2, r4
 8003818:	609a      	str	r2, [r3, #8]
}
 800381a:	bf00      	nop
 800381c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003820:	46bd      	mov	sp, r7
 8003822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003826:	bf00      	nop
 8003828:	51eb851f 	.word	0x51eb851f

0800382c <__errno>:
 800382c:	4b01      	ldr	r3, [pc, #4]	; (8003834 <__errno+0x8>)
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	2000000c 	.word	0x2000000c

08003838 <__libc_init_array>:
 8003838:	b570      	push	{r4, r5, r6, lr}
 800383a:	4d0d      	ldr	r5, [pc, #52]	; (8003870 <__libc_init_array+0x38>)
 800383c:	4c0d      	ldr	r4, [pc, #52]	; (8003874 <__libc_init_array+0x3c>)
 800383e:	1b64      	subs	r4, r4, r5
 8003840:	10a4      	asrs	r4, r4, #2
 8003842:	2600      	movs	r6, #0
 8003844:	42a6      	cmp	r6, r4
 8003846:	d109      	bne.n	800385c <__libc_init_array+0x24>
 8003848:	4d0b      	ldr	r5, [pc, #44]	; (8003878 <__libc_init_array+0x40>)
 800384a:	4c0c      	ldr	r4, [pc, #48]	; (800387c <__libc_init_array+0x44>)
 800384c:	f000 fca0 	bl	8004190 <_init>
 8003850:	1b64      	subs	r4, r4, r5
 8003852:	10a4      	asrs	r4, r4, #2
 8003854:	2600      	movs	r6, #0
 8003856:	42a6      	cmp	r6, r4
 8003858:	d105      	bne.n	8003866 <__libc_init_array+0x2e>
 800385a:	bd70      	pop	{r4, r5, r6, pc}
 800385c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003860:	4798      	blx	r3
 8003862:	3601      	adds	r6, #1
 8003864:	e7ee      	b.n	8003844 <__libc_init_array+0xc>
 8003866:	f855 3b04 	ldr.w	r3, [r5], #4
 800386a:	4798      	blx	r3
 800386c:	3601      	adds	r6, #1
 800386e:	e7f2      	b.n	8003856 <__libc_init_array+0x1e>
 8003870:	08004230 	.word	0x08004230
 8003874:	08004230 	.word	0x08004230
 8003878:	08004230 	.word	0x08004230
 800387c:	08004234 	.word	0x08004234

08003880 <memset>:
 8003880:	4402      	add	r2, r0
 8003882:	4603      	mov	r3, r0
 8003884:	4293      	cmp	r3, r2
 8003886:	d100      	bne.n	800388a <memset+0xa>
 8003888:	4770      	bx	lr
 800388a:	f803 1b01 	strb.w	r1, [r3], #1
 800388e:	e7f9      	b.n	8003884 <memset+0x4>

08003890 <siprintf>:
 8003890:	b40e      	push	{r1, r2, r3}
 8003892:	b500      	push	{lr}
 8003894:	b09c      	sub	sp, #112	; 0x70
 8003896:	ab1d      	add	r3, sp, #116	; 0x74
 8003898:	9002      	str	r0, [sp, #8]
 800389a:	9006      	str	r0, [sp, #24]
 800389c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038a0:	4809      	ldr	r0, [pc, #36]	; (80038c8 <siprintf+0x38>)
 80038a2:	9107      	str	r1, [sp, #28]
 80038a4:	9104      	str	r1, [sp, #16]
 80038a6:	4909      	ldr	r1, [pc, #36]	; (80038cc <siprintf+0x3c>)
 80038a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80038ac:	9105      	str	r1, [sp, #20]
 80038ae:	6800      	ldr	r0, [r0, #0]
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	a902      	add	r1, sp, #8
 80038b4:	f000 f87a 	bl	80039ac <_svfiprintf_r>
 80038b8:	9b02      	ldr	r3, [sp, #8]
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	b01c      	add	sp, #112	; 0x70
 80038c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80038c4:	b003      	add	sp, #12
 80038c6:	4770      	bx	lr
 80038c8:	2000000c 	.word	0x2000000c
 80038cc:	ffff0208 	.word	0xffff0208

080038d0 <strncpy>:
 80038d0:	b510      	push	{r4, lr}
 80038d2:	3901      	subs	r1, #1
 80038d4:	4603      	mov	r3, r0
 80038d6:	b132      	cbz	r2, 80038e6 <strncpy+0x16>
 80038d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80038dc:	f803 4b01 	strb.w	r4, [r3], #1
 80038e0:	3a01      	subs	r2, #1
 80038e2:	2c00      	cmp	r4, #0
 80038e4:	d1f7      	bne.n	80038d6 <strncpy+0x6>
 80038e6:	441a      	add	r2, r3
 80038e8:	2100      	movs	r1, #0
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d100      	bne.n	80038f0 <strncpy+0x20>
 80038ee:	bd10      	pop	{r4, pc}
 80038f0:	f803 1b01 	strb.w	r1, [r3], #1
 80038f4:	e7f9      	b.n	80038ea <strncpy+0x1a>

080038f6 <__ssputs_r>:
 80038f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038fa:	688e      	ldr	r6, [r1, #8]
 80038fc:	429e      	cmp	r6, r3
 80038fe:	4682      	mov	sl, r0
 8003900:	460c      	mov	r4, r1
 8003902:	4690      	mov	r8, r2
 8003904:	461f      	mov	r7, r3
 8003906:	d838      	bhi.n	800397a <__ssputs_r+0x84>
 8003908:	898a      	ldrh	r2, [r1, #12]
 800390a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800390e:	d032      	beq.n	8003976 <__ssputs_r+0x80>
 8003910:	6825      	ldr	r5, [r4, #0]
 8003912:	6909      	ldr	r1, [r1, #16]
 8003914:	eba5 0901 	sub.w	r9, r5, r1
 8003918:	6965      	ldr	r5, [r4, #20]
 800391a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800391e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003922:	3301      	adds	r3, #1
 8003924:	444b      	add	r3, r9
 8003926:	106d      	asrs	r5, r5, #1
 8003928:	429d      	cmp	r5, r3
 800392a:	bf38      	it	cc
 800392c:	461d      	movcc	r5, r3
 800392e:	0553      	lsls	r3, r2, #21
 8003930:	d531      	bpl.n	8003996 <__ssputs_r+0xa0>
 8003932:	4629      	mov	r1, r5
 8003934:	f000 fb62 	bl	8003ffc <_malloc_r>
 8003938:	4606      	mov	r6, r0
 800393a:	b950      	cbnz	r0, 8003952 <__ssputs_r+0x5c>
 800393c:	230c      	movs	r3, #12
 800393e:	f8ca 3000 	str.w	r3, [sl]
 8003942:	89a3      	ldrh	r3, [r4, #12]
 8003944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003948:	81a3      	strh	r3, [r4, #12]
 800394a:	f04f 30ff 	mov.w	r0, #4294967295
 800394e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003952:	6921      	ldr	r1, [r4, #16]
 8003954:	464a      	mov	r2, r9
 8003956:	f000 fabd 	bl	8003ed4 <memcpy>
 800395a:	89a3      	ldrh	r3, [r4, #12]
 800395c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003964:	81a3      	strh	r3, [r4, #12]
 8003966:	6126      	str	r6, [r4, #16]
 8003968:	6165      	str	r5, [r4, #20]
 800396a:	444e      	add	r6, r9
 800396c:	eba5 0509 	sub.w	r5, r5, r9
 8003970:	6026      	str	r6, [r4, #0]
 8003972:	60a5      	str	r5, [r4, #8]
 8003974:	463e      	mov	r6, r7
 8003976:	42be      	cmp	r6, r7
 8003978:	d900      	bls.n	800397c <__ssputs_r+0x86>
 800397a:	463e      	mov	r6, r7
 800397c:	6820      	ldr	r0, [r4, #0]
 800397e:	4632      	mov	r2, r6
 8003980:	4641      	mov	r1, r8
 8003982:	f000 fab5 	bl	8003ef0 <memmove>
 8003986:	68a3      	ldr	r3, [r4, #8]
 8003988:	1b9b      	subs	r3, r3, r6
 800398a:	60a3      	str	r3, [r4, #8]
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	4433      	add	r3, r6
 8003990:	6023      	str	r3, [r4, #0]
 8003992:	2000      	movs	r0, #0
 8003994:	e7db      	b.n	800394e <__ssputs_r+0x58>
 8003996:	462a      	mov	r2, r5
 8003998:	f000 fba4 	bl	80040e4 <_realloc_r>
 800399c:	4606      	mov	r6, r0
 800399e:	2800      	cmp	r0, #0
 80039a0:	d1e1      	bne.n	8003966 <__ssputs_r+0x70>
 80039a2:	6921      	ldr	r1, [r4, #16]
 80039a4:	4650      	mov	r0, sl
 80039a6:	f000 fabd 	bl	8003f24 <_free_r>
 80039aa:	e7c7      	b.n	800393c <__ssputs_r+0x46>

080039ac <_svfiprintf_r>:
 80039ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b0:	4698      	mov	r8, r3
 80039b2:	898b      	ldrh	r3, [r1, #12]
 80039b4:	061b      	lsls	r3, r3, #24
 80039b6:	b09d      	sub	sp, #116	; 0x74
 80039b8:	4607      	mov	r7, r0
 80039ba:	460d      	mov	r5, r1
 80039bc:	4614      	mov	r4, r2
 80039be:	d50e      	bpl.n	80039de <_svfiprintf_r+0x32>
 80039c0:	690b      	ldr	r3, [r1, #16]
 80039c2:	b963      	cbnz	r3, 80039de <_svfiprintf_r+0x32>
 80039c4:	2140      	movs	r1, #64	; 0x40
 80039c6:	f000 fb19 	bl	8003ffc <_malloc_r>
 80039ca:	6028      	str	r0, [r5, #0]
 80039cc:	6128      	str	r0, [r5, #16]
 80039ce:	b920      	cbnz	r0, 80039da <_svfiprintf_r+0x2e>
 80039d0:	230c      	movs	r3, #12
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	e0d1      	b.n	8003b7e <_svfiprintf_r+0x1d2>
 80039da:	2340      	movs	r3, #64	; 0x40
 80039dc:	616b      	str	r3, [r5, #20]
 80039de:	2300      	movs	r3, #0
 80039e0:	9309      	str	r3, [sp, #36]	; 0x24
 80039e2:	2320      	movs	r3, #32
 80039e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80039ec:	2330      	movs	r3, #48	; 0x30
 80039ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b98 <_svfiprintf_r+0x1ec>
 80039f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039f6:	f04f 0901 	mov.w	r9, #1
 80039fa:	4623      	mov	r3, r4
 80039fc:	469a      	mov	sl, r3
 80039fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a02:	b10a      	cbz	r2, 8003a08 <_svfiprintf_r+0x5c>
 8003a04:	2a25      	cmp	r2, #37	; 0x25
 8003a06:	d1f9      	bne.n	80039fc <_svfiprintf_r+0x50>
 8003a08:	ebba 0b04 	subs.w	fp, sl, r4
 8003a0c:	d00b      	beq.n	8003a26 <_svfiprintf_r+0x7a>
 8003a0e:	465b      	mov	r3, fp
 8003a10:	4622      	mov	r2, r4
 8003a12:	4629      	mov	r1, r5
 8003a14:	4638      	mov	r0, r7
 8003a16:	f7ff ff6e 	bl	80038f6 <__ssputs_r>
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	f000 80aa 	beq.w	8003b74 <_svfiprintf_r+0x1c8>
 8003a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a22:	445a      	add	r2, fp
 8003a24:	9209      	str	r2, [sp, #36]	; 0x24
 8003a26:	f89a 3000 	ldrb.w	r3, [sl]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80a2 	beq.w	8003b74 <_svfiprintf_r+0x1c8>
 8003a30:	2300      	movs	r3, #0
 8003a32:	f04f 32ff 	mov.w	r2, #4294967295
 8003a36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a3a:	f10a 0a01 	add.w	sl, sl, #1
 8003a3e:	9304      	str	r3, [sp, #16]
 8003a40:	9307      	str	r3, [sp, #28]
 8003a42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a46:	931a      	str	r3, [sp, #104]	; 0x68
 8003a48:	4654      	mov	r4, sl
 8003a4a:	2205      	movs	r2, #5
 8003a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a50:	4851      	ldr	r0, [pc, #324]	; (8003b98 <_svfiprintf_r+0x1ec>)
 8003a52:	f7fc fbcd 	bl	80001f0 <memchr>
 8003a56:	9a04      	ldr	r2, [sp, #16]
 8003a58:	b9d8      	cbnz	r0, 8003a92 <_svfiprintf_r+0xe6>
 8003a5a:	06d0      	lsls	r0, r2, #27
 8003a5c:	bf44      	itt	mi
 8003a5e:	2320      	movmi	r3, #32
 8003a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a64:	0711      	lsls	r1, r2, #28
 8003a66:	bf44      	itt	mi
 8003a68:	232b      	movmi	r3, #43	; 0x2b
 8003a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a72:	2b2a      	cmp	r3, #42	; 0x2a
 8003a74:	d015      	beq.n	8003aa2 <_svfiprintf_r+0xf6>
 8003a76:	9a07      	ldr	r2, [sp, #28]
 8003a78:	4654      	mov	r4, sl
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f04f 0c0a 	mov.w	ip, #10
 8003a80:	4621      	mov	r1, r4
 8003a82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a86:	3b30      	subs	r3, #48	; 0x30
 8003a88:	2b09      	cmp	r3, #9
 8003a8a:	d94e      	bls.n	8003b2a <_svfiprintf_r+0x17e>
 8003a8c:	b1b0      	cbz	r0, 8003abc <_svfiprintf_r+0x110>
 8003a8e:	9207      	str	r2, [sp, #28]
 8003a90:	e014      	b.n	8003abc <_svfiprintf_r+0x110>
 8003a92:	eba0 0308 	sub.w	r3, r0, r8
 8003a96:	fa09 f303 	lsl.w	r3, r9, r3
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	9304      	str	r3, [sp, #16]
 8003a9e:	46a2      	mov	sl, r4
 8003aa0:	e7d2      	b.n	8003a48 <_svfiprintf_r+0x9c>
 8003aa2:	9b03      	ldr	r3, [sp, #12]
 8003aa4:	1d19      	adds	r1, r3, #4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	9103      	str	r1, [sp, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bfbb      	ittet	lt
 8003aae:	425b      	neglt	r3, r3
 8003ab0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ab4:	9307      	strge	r3, [sp, #28]
 8003ab6:	9307      	strlt	r3, [sp, #28]
 8003ab8:	bfb8      	it	lt
 8003aba:	9204      	strlt	r2, [sp, #16]
 8003abc:	7823      	ldrb	r3, [r4, #0]
 8003abe:	2b2e      	cmp	r3, #46	; 0x2e
 8003ac0:	d10c      	bne.n	8003adc <_svfiprintf_r+0x130>
 8003ac2:	7863      	ldrb	r3, [r4, #1]
 8003ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac6:	d135      	bne.n	8003b34 <_svfiprintf_r+0x188>
 8003ac8:	9b03      	ldr	r3, [sp, #12]
 8003aca:	1d1a      	adds	r2, r3, #4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	9203      	str	r2, [sp, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bfb8      	it	lt
 8003ad4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ad8:	3402      	adds	r4, #2
 8003ada:	9305      	str	r3, [sp, #20]
 8003adc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ba8 <_svfiprintf_r+0x1fc>
 8003ae0:	7821      	ldrb	r1, [r4, #0]
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	4650      	mov	r0, sl
 8003ae6:	f7fc fb83 	bl	80001f0 <memchr>
 8003aea:	b140      	cbz	r0, 8003afe <_svfiprintf_r+0x152>
 8003aec:	2340      	movs	r3, #64	; 0x40
 8003aee:	eba0 000a 	sub.w	r0, r0, sl
 8003af2:	fa03 f000 	lsl.w	r0, r3, r0
 8003af6:	9b04      	ldr	r3, [sp, #16]
 8003af8:	4303      	orrs	r3, r0
 8003afa:	3401      	adds	r4, #1
 8003afc:	9304      	str	r3, [sp, #16]
 8003afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b02:	4826      	ldr	r0, [pc, #152]	; (8003b9c <_svfiprintf_r+0x1f0>)
 8003b04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b08:	2206      	movs	r2, #6
 8003b0a:	f7fc fb71 	bl	80001f0 <memchr>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d038      	beq.n	8003b84 <_svfiprintf_r+0x1d8>
 8003b12:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <_svfiprintf_r+0x1f4>)
 8003b14:	bb1b      	cbnz	r3, 8003b5e <_svfiprintf_r+0x1b2>
 8003b16:	9b03      	ldr	r3, [sp, #12]
 8003b18:	3307      	adds	r3, #7
 8003b1a:	f023 0307 	bic.w	r3, r3, #7
 8003b1e:	3308      	adds	r3, #8
 8003b20:	9303      	str	r3, [sp, #12]
 8003b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b24:	4433      	add	r3, r6
 8003b26:	9309      	str	r3, [sp, #36]	; 0x24
 8003b28:	e767      	b.n	80039fa <_svfiprintf_r+0x4e>
 8003b2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b2e:	460c      	mov	r4, r1
 8003b30:	2001      	movs	r0, #1
 8003b32:	e7a5      	b.n	8003a80 <_svfiprintf_r+0xd4>
 8003b34:	2300      	movs	r3, #0
 8003b36:	3401      	adds	r4, #1
 8003b38:	9305      	str	r3, [sp, #20]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	f04f 0c0a 	mov.w	ip, #10
 8003b40:	4620      	mov	r0, r4
 8003b42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b46:	3a30      	subs	r2, #48	; 0x30
 8003b48:	2a09      	cmp	r2, #9
 8003b4a:	d903      	bls.n	8003b54 <_svfiprintf_r+0x1a8>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0c5      	beq.n	8003adc <_svfiprintf_r+0x130>
 8003b50:	9105      	str	r1, [sp, #20]
 8003b52:	e7c3      	b.n	8003adc <_svfiprintf_r+0x130>
 8003b54:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b58:	4604      	mov	r4, r0
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e7f0      	b.n	8003b40 <_svfiprintf_r+0x194>
 8003b5e:	ab03      	add	r3, sp, #12
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	462a      	mov	r2, r5
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <_svfiprintf_r+0x1f8>)
 8003b66:	a904      	add	r1, sp, #16
 8003b68:	4638      	mov	r0, r7
 8003b6a:	f3af 8000 	nop.w
 8003b6e:	1c42      	adds	r2, r0, #1
 8003b70:	4606      	mov	r6, r0
 8003b72:	d1d6      	bne.n	8003b22 <_svfiprintf_r+0x176>
 8003b74:	89ab      	ldrh	r3, [r5, #12]
 8003b76:	065b      	lsls	r3, r3, #25
 8003b78:	f53f af2c 	bmi.w	80039d4 <_svfiprintf_r+0x28>
 8003b7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b7e:	b01d      	add	sp, #116	; 0x74
 8003b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b84:	ab03      	add	r3, sp, #12
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	462a      	mov	r2, r5
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <_svfiprintf_r+0x1f8>)
 8003b8c:	a904      	add	r1, sp, #16
 8003b8e:	4638      	mov	r0, r7
 8003b90:	f000 f87a 	bl	8003c88 <_printf_i>
 8003b94:	e7eb      	b.n	8003b6e <_svfiprintf_r+0x1c2>
 8003b96:	bf00      	nop
 8003b98:	080041f4 	.word	0x080041f4
 8003b9c:	080041fe 	.word	0x080041fe
 8003ba0:	00000000 	.word	0x00000000
 8003ba4:	080038f7 	.word	0x080038f7
 8003ba8:	080041fa 	.word	0x080041fa

08003bac <_printf_common>:
 8003bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb0:	4616      	mov	r6, r2
 8003bb2:	4699      	mov	r9, r3
 8003bb4:	688a      	ldr	r2, [r1, #8]
 8003bb6:	690b      	ldr	r3, [r1, #16]
 8003bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	bfb8      	it	lt
 8003bc0:	4613      	movlt	r3, r2
 8003bc2:	6033      	str	r3, [r6, #0]
 8003bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bc8:	4607      	mov	r7, r0
 8003bca:	460c      	mov	r4, r1
 8003bcc:	b10a      	cbz	r2, 8003bd2 <_printf_common+0x26>
 8003bce:	3301      	adds	r3, #1
 8003bd0:	6033      	str	r3, [r6, #0]
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	0699      	lsls	r1, r3, #26
 8003bd6:	bf42      	ittt	mi
 8003bd8:	6833      	ldrmi	r3, [r6, #0]
 8003bda:	3302      	addmi	r3, #2
 8003bdc:	6033      	strmi	r3, [r6, #0]
 8003bde:	6825      	ldr	r5, [r4, #0]
 8003be0:	f015 0506 	ands.w	r5, r5, #6
 8003be4:	d106      	bne.n	8003bf4 <_printf_common+0x48>
 8003be6:	f104 0a19 	add.w	sl, r4, #25
 8003bea:	68e3      	ldr	r3, [r4, #12]
 8003bec:	6832      	ldr	r2, [r6, #0]
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	42ab      	cmp	r3, r5
 8003bf2:	dc26      	bgt.n	8003c42 <_printf_common+0x96>
 8003bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bf8:	1e13      	subs	r3, r2, #0
 8003bfa:	6822      	ldr	r2, [r4, #0]
 8003bfc:	bf18      	it	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	0692      	lsls	r2, r2, #26
 8003c02:	d42b      	bmi.n	8003c5c <_printf_common+0xb0>
 8003c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c08:	4649      	mov	r1, r9
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	47c0      	blx	r8
 8003c0e:	3001      	adds	r0, #1
 8003c10:	d01e      	beq.n	8003c50 <_printf_common+0xa4>
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	68e5      	ldr	r5, [r4, #12]
 8003c16:	6832      	ldr	r2, [r6, #0]
 8003c18:	f003 0306 	and.w	r3, r3, #6
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	bf08      	it	eq
 8003c20:	1aad      	subeq	r5, r5, r2
 8003c22:	68a3      	ldr	r3, [r4, #8]
 8003c24:	6922      	ldr	r2, [r4, #16]
 8003c26:	bf0c      	ite	eq
 8003c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c2c:	2500      	movne	r5, #0
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	bfc4      	itt	gt
 8003c32:	1a9b      	subgt	r3, r3, r2
 8003c34:	18ed      	addgt	r5, r5, r3
 8003c36:	2600      	movs	r6, #0
 8003c38:	341a      	adds	r4, #26
 8003c3a:	42b5      	cmp	r5, r6
 8003c3c:	d11a      	bne.n	8003c74 <_printf_common+0xc8>
 8003c3e:	2000      	movs	r0, #0
 8003c40:	e008      	b.n	8003c54 <_printf_common+0xa8>
 8003c42:	2301      	movs	r3, #1
 8003c44:	4652      	mov	r2, sl
 8003c46:	4649      	mov	r1, r9
 8003c48:	4638      	mov	r0, r7
 8003c4a:	47c0      	blx	r8
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d103      	bne.n	8003c58 <_printf_common+0xac>
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c58:	3501      	adds	r5, #1
 8003c5a:	e7c6      	b.n	8003bea <_printf_common+0x3e>
 8003c5c:	18e1      	adds	r1, r4, r3
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	2030      	movs	r0, #48	; 0x30
 8003c62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c66:	4422      	add	r2, r4
 8003c68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c70:	3302      	adds	r3, #2
 8003c72:	e7c7      	b.n	8003c04 <_printf_common+0x58>
 8003c74:	2301      	movs	r3, #1
 8003c76:	4622      	mov	r2, r4
 8003c78:	4649      	mov	r1, r9
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	47c0      	blx	r8
 8003c7e:	3001      	adds	r0, #1
 8003c80:	d0e6      	beq.n	8003c50 <_printf_common+0xa4>
 8003c82:	3601      	adds	r6, #1
 8003c84:	e7d9      	b.n	8003c3a <_printf_common+0x8e>
	...

08003c88 <_printf_i>:
 8003c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c8c:	7e0f      	ldrb	r7, [r1, #24]
 8003c8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c90:	2f78      	cmp	r7, #120	; 0x78
 8003c92:	4691      	mov	r9, r2
 8003c94:	4680      	mov	r8, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	469a      	mov	sl, r3
 8003c9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c9e:	d807      	bhi.n	8003cb0 <_printf_i+0x28>
 8003ca0:	2f62      	cmp	r7, #98	; 0x62
 8003ca2:	d80a      	bhi.n	8003cba <_printf_i+0x32>
 8003ca4:	2f00      	cmp	r7, #0
 8003ca6:	f000 80d8 	beq.w	8003e5a <_printf_i+0x1d2>
 8003caa:	2f58      	cmp	r7, #88	; 0x58
 8003cac:	f000 80a3 	beq.w	8003df6 <_printf_i+0x16e>
 8003cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cb8:	e03a      	b.n	8003d30 <_printf_i+0xa8>
 8003cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cbe:	2b15      	cmp	r3, #21
 8003cc0:	d8f6      	bhi.n	8003cb0 <_printf_i+0x28>
 8003cc2:	a101      	add	r1, pc, #4	; (adr r1, 8003cc8 <_printf_i+0x40>)
 8003cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cc8:	08003d21 	.word	0x08003d21
 8003ccc:	08003d35 	.word	0x08003d35
 8003cd0:	08003cb1 	.word	0x08003cb1
 8003cd4:	08003cb1 	.word	0x08003cb1
 8003cd8:	08003cb1 	.word	0x08003cb1
 8003cdc:	08003cb1 	.word	0x08003cb1
 8003ce0:	08003d35 	.word	0x08003d35
 8003ce4:	08003cb1 	.word	0x08003cb1
 8003ce8:	08003cb1 	.word	0x08003cb1
 8003cec:	08003cb1 	.word	0x08003cb1
 8003cf0:	08003cb1 	.word	0x08003cb1
 8003cf4:	08003e41 	.word	0x08003e41
 8003cf8:	08003d65 	.word	0x08003d65
 8003cfc:	08003e23 	.word	0x08003e23
 8003d00:	08003cb1 	.word	0x08003cb1
 8003d04:	08003cb1 	.word	0x08003cb1
 8003d08:	08003e63 	.word	0x08003e63
 8003d0c:	08003cb1 	.word	0x08003cb1
 8003d10:	08003d65 	.word	0x08003d65
 8003d14:	08003cb1 	.word	0x08003cb1
 8003d18:	08003cb1 	.word	0x08003cb1
 8003d1c:	08003e2b 	.word	0x08003e2b
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	1d1a      	adds	r2, r3, #4
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	602a      	str	r2, [r5, #0]
 8003d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0a3      	b.n	8003e7c <_printf_i+0x1f4>
 8003d34:	6820      	ldr	r0, [r4, #0]
 8003d36:	6829      	ldr	r1, [r5, #0]
 8003d38:	0606      	lsls	r6, r0, #24
 8003d3a:	f101 0304 	add.w	r3, r1, #4
 8003d3e:	d50a      	bpl.n	8003d56 <_printf_i+0xce>
 8003d40:	680e      	ldr	r6, [r1, #0]
 8003d42:	602b      	str	r3, [r5, #0]
 8003d44:	2e00      	cmp	r6, #0
 8003d46:	da03      	bge.n	8003d50 <_printf_i+0xc8>
 8003d48:	232d      	movs	r3, #45	; 0x2d
 8003d4a:	4276      	negs	r6, r6
 8003d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d50:	485e      	ldr	r0, [pc, #376]	; (8003ecc <_printf_i+0x244>)
 8003d52:	230a      	movs	r3, #10
 8003d54:	e019      	b.n	8003d8a <_printf_i+0x102>
 8003d56:	680e      	ldr	r6, [r1, #0]
 8003d58:	602b      	str	r3, [r5, #0]
 8003d5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d5e:	bf18      	it	ne
 8003d60:	b236      	sxthne	r6, r6
 8003d62:	e7ef      	b.n	8003d44 <_printf_i+0xbc>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	6820      	ldr	r0, [r4, #0]
 8003d68:	1d19      	adds	r1, r3, #4
 8003d6a:	6029      	str	r1, [r5, #0]
 8003d6c:	0601      	lsls	r1, r0, #24
 8003d6e:	d501      	bpl.n	8003d74 <_printf_i+0xec>
 8003d70:	681e      	ldr	r6, [r3, #0]
 8003d72:	e002      	b.n	8003d7a <_printf_i+0xf2>
 8003d74:	0646      	lsls	r6, r0, #25
 8003d76:	d5fb      	bpl.n	8003d70 <_printf_i+0xe8>
 8003d78:	881e      	ldrh	r6, [r3, #0]
 8003d7a:	4854      	ldr	r0, [pc, #336]	; (8003ecc <_printf_i+0x244>)
 8003d7c:	2f6f      	cmp	r7, #111	; 0x6f
 8003d7e:	bf0c      	ite	eq
 8003d80:	2308      	moveq	r3, #8
 8003d82:	230a      	movne	r3, #10
 8003d84:	2100      	movs	r1, #0
 8003d86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d8a:	6865      	ldr	r5, [r4, #4]
 8003d8c:	60a5      	str	r5, [r4, #8]
 8003d8e:	2d00      	cmp	r5, #0
 8003d90:	bfa2      	ittt	ge
 8003d92:	6821      	ldrge	r1, [r4, #0]
 8003d94:	f021 0104 	bicge.w	r1, r1, #4
 8003d98:	6021      	strge	r1, [r4, #0]
 8003d9a:	b90e      	cbnz	r6, 8003da0 <_printf_i+0x118>
 8003d9c:	2d00      	cmp	r5, #0
 8003d9e:	d04d      	beq.n	8003e3c <_printf_i+0x1b4>
 8003da0:	4615      	mov	r5, r2
 8003da2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003da6:	fb03 6711 	mls	r7, r3, r1, r6
 8003daa:	5dc7      	ldrb	r7, [r0, r7]
 8003dac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003db0:	4637      	mov	r7, r6
 8003db2:	42bb      	cmp	r3, r7
 8003db4:	460e      	mov	r6, r1
 8003db6:	d9f4      	bls.n	8003da2 <_printf_i+0x11a>
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d10b      	bne.n	8003dd4 <_printf_i+0x14c>
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	07de      	lsls	r6, r3, #31
 8003dc0:	d508      	bpl.n	8003dd4 <_printf_i+0x14c>
 8003dc2:	6923      	ldr	r3, [r4, #16]
 8003dc4:	6861      	ldr	r1, [r4, #4]
 8003dc6:	4299      	cmp	r1, r3
 8003dc8:	bfde      	ittt	le
 8003dca:	2330      	movle	r3, #48	; 0x30
 8003dcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003dd4:	1b52      	subs	r2, r2, r5
 8003dd6:	6122      	str	r2, [r4, #16]
 8003dd8:	f8cd a000 	str.w	sl, [sp]
 8003ddc:	464b      	mov	r3, r9
 8003dde:	aa03      	add	r2, sp, #12
 8003de0:	4621      	mov	r1, r4
 8003de2:	4640      	mov	r0, r8
 8003de4:	f7ff fee2 	bl	8003bac <_printf_common>
 8003de8:	3001      	adds	r0, #1
 8003dea:	d14c      	bne.n	8003e86 <_printf_i+0x1fe>
 8003dec:	f04f 30ff 	mov.w	r0, #4294967295
 8003df0:	b004      	add	sp, #16
 8003df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df6:	4835      	ldr	r0, [pc, #212]	; (8003ecc <_printf_i+0x244>)
 8003df8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003dfc:	6829      	ldr	r1, [r5, #0]
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e04:	6029      	str	r1, [r5, #0]
 8003e06:	061d      	lsls	r5, r3, #24
 8003e08:	d514      	bpl.n	8003e34 <_printf_i+0x1ac>
 8003e0a:	07df      	lsls	r7, r3, #31
 8003e0c:	bf44      	itt	mi
 8003e0e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e12:	6023      	strmi	r3, [r4, #0]
 8003e14:	b91e      	cbnz	r6, 8003e1e <_printf_i+0x196>
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	f023 0320 	bic.w	r3, r3, #32
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	2310      	movs	r3, #16
 8003e20:	e7b0      	b.n	8003d84 <_printf_i+0xfc>
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	f043 0320 	orr.w	r3, r3, #32
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	2378      	movs	r3, #120	; 0x78
 8003e2c:	4828      	ldr	r0, [pc, #160]	; (8003ed0 <_printf_i+0x248>)
 8003e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e32:	e7e3      	b.n	8003dfc <_printf_i+0x174>
 8003e34:	0659      	lsls	r1, r3, #25
 8003e36:	bf48      	it	mi
 8003e38:	b2b6      	uxthmi	r6, r6
 8003e3a:	e7e6      	b.n	8003e0a <_printf_i+0x182>
 8003e3c:	4615      	mov	r5, r2
 8003e3e:	e7bb      	b.n	8003db8 <_printf_i+0x130>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	6826      	ldr	r6, [r4, #0]
 8003e44:	6961      	ldr	r1, [r4, #20]
 8003e46:	1d18      	adds	r0, r3, #4
 8003e48:	6028      	str	r0, [r5, #0]
 8003e4a:	0635      	lsls	r5, r6, #24
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	d501      	bpl.n	8003e54 <_printf_i+0x1cc>
 8003e50:	6019      	str	r1, [r3, #0]
 8003e52:	e002      	b.n	8003e5a <_printf_i+0x1d2>
 8003e54:	0670      	lsls	r0, r6, #25
 8003e56:	d5fb      	bpl.n	8003e50 <_printf_i+0x1c8>
 8003e58:	8019      	strh	r1, [r3, #0]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	6123      	str	r3, [r4, #16]
 8003e5e:	4615      	mov	r5, r2
 8003e60:	e7ba      	b.n	8003dd8 <_printf_i+0x150>
 8003e62:	682b      	ldr	r3, [r5, #0]
 8003e64:	1d1a      	adds	r2, r3, #4
 8003e66:	602a      	str	r2, [r5, #0]
 8003e68:	681d      	ldr	r5, [r3, #0]
 8003e6a:	6862      	ldr	r2, [r4, #4]
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f7fc f9be 	bl	80001f0 <memchr>
 8003e74:	b108      	cbz	r0, 8003e7a <_printf_i+0x1f2>
 8003e76:	1b40      	subs	r0, r0, r5
 8003e78:	6060      	str	r0, [r4, #4]
 8003e7a:	6863      	ldr	r3, [r4, #4]
 8003e7c:	6123      	str	r3, [r4, #16]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e84:	e7a8      	b.n	8003dd8 <_printf_i+0x150>
 8003e86:	6923      	ldr	r3, [r4, #16]
 8003e88:	462a      	mov	r2, r5
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	4640      	mov	r0, r8
 8003e8e:	47d0      	blx	sl
 8003e90:	3001      	adds	r0, #1
 8003e92:	d0ab      	beq.n	8003dec <_printf_i+0x164>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	079b      	lsls	r3, r3, #30
 8003e98:	d413      	bmi.n	8003ec2 <_printf_i+0x23a>
 8003e9a:	68e0      	ldr	r0, [r4, #12]
 8003e9c:	9b03      	ldr	r3, [sp, #12]
 8003e9e:	4298      	cmp	r0, r3
 8003ea0:	bfb8      	it	lt
 8003ea2:	4618      	movlt	r0, r3
 8003ea4:	e7a4      	b.n	8003df0 <_printf_i+0x168>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	4632      	mov	r2, r6
 8003eaa:	4649      	mov	r1, r9
 8003eac:	4640      	mov	r0, r8
 8003eae:	47d0      	blx	sl
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d09b      	beq.n	8003dec <_printf_i+0x164>
 8003eb4:	3501      	adds	r5, #1
 8003eb6:	68e3      	ldr	r3, [r4, #12]
 8003eb8:	9903      	ldr	r1, [sp, #12]
 8003eba:	1a5b      	subs	r3, r3, r1
 8003ebc:	42ab      	cmp	r3, r5
 8003ebe:	dcf2      	bgt.n	8003ea6 <_printf_i+0x21e>
 8003ec0:	e7eb      	b.n	8003e9a <_printf_i+0x212>
 8003ec2:	2500      	movs	r5, #0
 8003ec4:	f104 0619 	add.w	r6, r4, #25
 8003ec8:	e7f5      	b.n	8003eb6 <_printf_i+0x22e>
 8003eca:	bf00      	nop
 8003ecc:	08004205 	.word	0x08004205
 8003ed0:	08004216 	.word	0x08004216

08003ed4 <memcpy>:
 8003ed4:	440a      	add	r2, r1
 8003ed6:	4291      	cmp	r1, r2
 8003ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003edc:	d100      	bne.n	8003ee0 <memcpy+0xc>
 8003ede:	4770      	bx	lr
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003eea:	4291      	cmp	r1, r2
 8003eec:	d1f9      	bne.n	8003ee2 <memcpy+0xe>
 8003eee:	bd10      	pop	{r4, pc}

08003ef0 <memmove>:
 8003ef0:	4288      	cmp	r0, r1
 8003ef2:	b510      	push	{r4, lr}
 8003ef4:	eb01 0402 	add.w	r4, r1, r2
 8003ef8:	d902      	bls.n	8003f00 <memmove+0x10>
 8003efa:	4284      	cmp	r4, r0
 8003efc:	4623      	mov	r3, r4
 8003efe:	d807      	bhi.n	8003f10 <memmove+0x20>
 8003f00:	1e43      	subs	r3, r0, #1
 8003f02:	42a1      	cmp	r1, r4
 8003f04:	d008      	beq.n	8003f18 <memmove+0x28>
 8003f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f0e:	e7f8      	b.n	8003f02 <memmove+0x12>
 8003f10:	4402      	add	r2, r0
 8003f12:	4601      	mov	r1, r0
 8003f14:	428a      	cmp	r2, r1
 8003f16:	d100      	bne.n	8003f1a <memmove+0x2a>
 8003f18:	bd10      	pop	{r4, pc}
 8003f1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f22:	e7f7      	b.n	8003f14 <memmove+0x24>

08003f24 <_free_r>:
 8003f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f26:	2900      	cmp	r1, #0
 8003f28:	d044      	beq.n	8003fb4 <_free_r+0x90>
 8003f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f2e:	9001      	str	r0, [sp, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f1a1 0404 	sub.w	r4, r1, #4
 8003f36:	bfb8      	it	lt
 8003f38:	18e4      	addlt	r4, r4, r3
 8003f3a:	f000 f913 	bl	8004164 <__malloc_lock>
 8003f3e:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <_free_r+0x94>)
 8003f40:	9801      	ldr	r0, [sp, #4]
 8003f42:	6813      	ldr	r3, [r2, #0]
 8003f44:	b933      	cbnz	r3, 8003f54 <_free_r+0x30>
 8003f46:	6063      	str	r3, [r4, #4]
 8003f48:	6014      	str	r4, [r2, #0]
 8003f4a:	b003      	add	sp, #12
 8003f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f50:	f000 b90e 	b.w	8004170 <__malloc_unlock>
 8003f54:	42a3      	cmp	r3, r4
 8003f56:	d908      	bls.n	8003f6a <_free_r+0x46>
 8003f58:	6825      	ldr	r5, [r4, #0]
 8003f5a:	1961      	adds	r1, r4, r5
 8003f5c:	428b      	cmp	r3, r1
 8003f5e:	bf01      	itttt	eq
 8003f60:	6819      	ldreq	r1, [r3, #0]
 8003f62:	685b      	ldreq	r3, [r3, #4]
 8003f64:	1949      	addeq	r1, r1, r5
 8003f66:	6021      	streq	r1, [r4, #0]
 8003f68:	e7ed      	b.n	8003f46 <_free_r+0x22>
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	b10b      	cbz	r3, 8003f74 <_free_r+0x50>
 8003f70:	42a3      	cmp	r3, r4
 8003f72:	d9fa      	bls.n	8003f6a <_free_r+0x46>
 8003f74:	6811      	ldr	r1, [r2, #0]
 8003f76:	1855      	adds	r5, r2, r1
 8003f78:	42a5      	cmp	r5, r4
 8003f7a:	d10b      	bne.n	8003f94 <_free_r+0x70>
 8003f7c:	6824      	ldr	r4, [r4, #0]
 8003f7e:	4421      	add	r1, r4
 8003f80:	1854      	adds	r4, r2, r1
 8003f82:	42a3      	cmp	r3, r4
 8003f84:	6011      	str	r1, [r2, #0]
 8003f86:	d1e0      	bne.n	8003f4a <_free_r+0x26>
 8003f88:	681c      	ldr	r4, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	6053      	str	r3, [r2, #4]
 8003f8e:	4421      	add	r1, r4
 8003f90:	6011      	str	r1, [r2, #0]
 8003f92:	e7da      	b.n	8003f4a <_free_r+0x26>
 8003f94:	d902      	bls.n	8003f9c <_free_r+0x78>
 8003f96:	230c      	movs	r3, #12
 8003f98:	6003      	str	r3, [r0, #0]
 8003f9a:	e7d6      	b.n	8003f4a <_free_r+0x26>
 8003f9c:	6825      	ldr	r5, [r4, #0]
 8003f9e:	1961      	adds	r1, r4, r5
 8003fa0:	428b      	cmp	r3, r1
 8003fa2:	bf04      	itt	eq
 8003fa4:	6819      	ldreq	r1, [r3, #0]
 8003fa6:	685b      	ldreq	r3, [r3, #4]
 8003fa8:	6063      	str	r3, [r4, #4]
 8003faa:	bf04      	itt	eq
 8003fac:	1949      	addeq	r1, r1, r5
 8003fae:	6021      	streq	r1, [r4, #0]
 8003fb0:	6054      	str	r4, [r2, #4]
 8003fb2:	e7ca      	b.n	8003f4a <_free_r+0x26>
 8003fb4:	b003      	add	sp, #12
 8003fb6:	bd30      	pop	{r4, r5, pc}
 8003fb8:	200002b0 	.word	0x200002b0

08003fbc <sbrk_aligned>:
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	4e0e      	ldr	r6, [pc, #56]	; (8003ff8 <sbrk_aligned+0x3c>)
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	6831      	ldr	r1, [r6, #0]
 8003fc4:	4605      	mov	r5, r0
 8003fc6:	b911      	cbnz	r1, 8003fce <sbrk_aligned+0x12>
 8003fc8:	f000 f8bc 	bl	8004144 <_sbrk_r>
 8003fcc:	6030      	str	r0, [r6, #0]
 8003fce:	4621      	mov	r1, r4
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	f000 f8b7 	bl	8004144 <_sbrk_r>
 8003fd6:	1c43      	adds	r3, r0, #1
 8003fd8:	d00a      	beq.n	8003ff0 <sbrk_aligned+0x34>
 8003fda:	1cc4      	adds	r4, r0, #3
 8003fdc:	f024 0403 	bic.w	r4, r4, #3
 8003fe0:	42a0      	cmp	r0, r4
 8003fe2:	d007      	beq.n	8003ff4 <sbrk_aligned+0x38>
 8003fe4:	1a21      	subs	r1, r4, r0
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	f000 f8ac 	bl	8004144 <_sbrk_r>
 8003fec:	3001      	adds	r0, #1
 8003fee:	d101      	bne.n	8003ff4 <sbrk_aligned+0x38>
 8003ff0:	f04f 34ff 	mov.w	r4, #4294967295
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
 8003ff8:	200002b4 	.word	0x200002b4

08003ffc <_malloc_r>:
 8003ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004000:	1ccd      	adds	r5, r1, #3
 8004002:	f025 0503 	bic.w	r5, r5, #3
 8004006:	3508      	adds	r5, #8
 8004008:	2d0c      	cmp	r5, #12
 800400a:	bf38      	it	cc
 800400c:	250c      	movcc	r5, #12
 800400e:	2d00      	cmp	r5, #0
 8004010:	4607      	mov	r7, r0
 8004012:	db01      	blt.n	8004018 <_malloc_r+0x1c>
 8004014:	42a9      	cmp	r1, r5
 8004016:	d905      	bls.n	8004024 <_malloc_r+0x28>
 8004018:	230c      	movs	r3, #12
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	2600      	movs	r6, #0
 800401e:	4630      	mov	r0, r6
 8004020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004024:	4e2e      	ldr	r6, [pc, #184]	; (80040e0 <_malloc_r+0xe4>)
 8004026:	f000 f89d 	bl	8004164 <__malloc_lock>
 800402a:	6833      	ldr	r3, [r6, #0]
 800402c:	461c      	mov	r4, r3
 800402e:	bb34      	cbnz	r4, 800407e <_malloc_r+0x82>
 8004030:	4629      	mov	r1, r5
 8004032:	4638      	mov	r0, r7
 8004034:	f7ff ffc2 	bl	8003fbc <sbrk_aligned>
 8004038:	1c43      	adds	r3, r0, #1
 800403a:	4604      	mov	r4, r0
 800403c:	d14d      	bne.n	80040da <_malloc_r+0xde>
 800403e:	6834      	ldr	r4, [r6, #0]
 8004040:	4626      	mov	r6, r4
 8004042:	2e00      	cmp	r6, #0
 8004044:	d140      	bne.n	80040c8 <_malloc_r+0xcc>
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	4631      	mov	r1, r6
 800404a:	4638      	mov	r0, r7
 800404c:	eb04 0803 	add.w	r8, r4, r3
 8004050:	f000 f878 	bl	8004144 <_sbrk_r>
 8004054:	4580      	cmp	r8, r0
 8004056:	d13a      	bne.n	80040ce <_malloc_r+0xd2>
 8004058:	6821      	ldr	r1, [r4, #0]
 800405a:	3503      	adds	r5, #3
 800405c:	1a6d      	subs	r5, r5, r1
 800405e:	f025 0503 	bic.w	r5, r5, #3
 8004062:	3508      	adds	r5, #8
 8004064:	2d0c      	cmp	r5, #12
 8004066:	bf38      	it	cc
 8004068:	250c      	movcc	r5, #12
 800406a:	4629      	mov	r1, r5
 800406c:	4638      	mov	r0, r7
 800406e:	f7ff ffa5 	bl	8003fbc <sbrk_aligned>
 8004072:	3001      	adds	r0, #1
 8004074:	d02b      	beq.n	80040ce <_malloc_r+0xd2>
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	442b      	add	r3, r5
 800407a:	6023      	str	r3, [r4, #0]
 800407c:	e00e      	b.n	800409c <_malloc_r+0xa0>
 800407e:	6822      	ldr	r2, [r4, #0]
 8004080:	1b52      	subs	r2, r2, r5
 8004082:	d41e      	bmi.n	80040c2 <_malloc_r+0xc6>
 8004084:	2a0b      	cmp	r2, #11
 8004086:	d916      	bls.n	80040b6 <_malloc_r+0xba>
 8004088:	1961      	adds	r1, r4, r5
 800408a:	42a3      	cmp	r3, r4
 800408c:	6025      	str	r5, [r4, #0]
 800408e:	bf18      	it	ne
 8004090:	6059      	strne	r1, [r3, #4]
 8004092:	6863      	ldr	r3, [r4, #4]
 8004094:	bf08      	it	eq
 8004096:	6031      	streq	r1, [r6, #0]
 8004098:	5162      	str	r2, [r4, r5]
 800409a:	604b      	str	r3, [r1, #4]
 800409c:	4638      	mov	r0, r7
 800409e:	f104 060b 	add.w	r6, r4, #11
 80040a2:	f000 f865 	bl	8004170 <__malloc_unlock>
 80040a6:	f026 0607 	bic.w	r6, r6, #7
 80040aa:	1d23      	adds	r3, r4, #4
 80040ac:	1af2      	subs	r2, r6, r3
 80040ae:	d0b6      	beq.n	800401e <_malloc_r+0x22>
 80040b0:	1b9b      	subs	r3, r3, r6
 80040b2:	50a3      	str	r3, [r4, r2]
 80040b4:	e7b3      	b.n	800401e <_malloc_r+0x22>
 80040b6:	6862      	ldr	r2, [r4, #4]
 80040b8:	42a3      	cmp	r3, r4
 80040ba:	bf0c      	ite	eq
 80040bc:	6032      	streq	r2, [r6, #0]
 80040be:	605a      	strne	r2, [r3, #4]
 80040c0:	e7ec      	b.n	800409c <_malloc_r+0xa0>
 80040c2:	4623      	mov	r3, r4
 80040c4:	6864      	ldr	r4, [r4, #4]
 80040c6:	e7b2      	b.n	800402e <_malloc_r+0x32>
 80040c8:	4634      	mov	r4, r6
 80040ca:	6876      	ldr	r6, [r6, #4]
 80040cc:	e7b9      	b.n	8004042 <_malloc_r+0x46>
 80040ce:	230c      	movs	r3, #12
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	4638      	mov	r0, r7
 80040d4:	f000 f84c 	bl	8004170 <__malloc_unlock>
 80040d8:	e7a1      	b.n	800401e <_malloc_r+0x22>
 80040da:	6025      	str	r5, [r4, #0]
 80040dc:	e7de      	b.n	800409c <_malloc_r+0xa0>
 80040de:	bf00      	nop
 80040e0:	200002b0 	.word	0x200002b0

080040e4 <_realloc_r>:
 80040e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e8:	4680      	mov	r8, r0
 80040ea:	4614      	mov	r4, r2
 80040ec:	460e      	mov	r6, r1
 80040ee:	b921      	cbnz	r1, 80040fa <_realloc_r+0x16>
 80040f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040f4:	4611      	mov	r1, r2
 80040f6:	f7ff bf81 	b.w	8003ffc <_malloc_r>
 80040fa:	b92a      	cbnz	r2, 8004108 <_realloc_r+0x24>
 80040fc:	f7ff ff12 	bl	8003f24 <_free_r>
 8004100:	4625      	mov	r5, r4
 8004102:	4628      	mov	r0, r5
 8004104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004108:	f000 f838 	bl	800417c <_malloc_usable_size_r>
 800410c:	4284      	cmp	r4, r0
 800410e:	4607      	mov	r7, r0
 8004110:	d802      	bhi.n	8004118 <_realloc_r+0x34>
 8004112:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004116:	d812      	bhi.n	800413e <_realloc_r+0x5a>
 8004118:	4621      	mov	r1, r4
 800411a:	4640      	mov	r0, r8
 800411c:	f7ff ff6e 	bl	8003ffc <_malloc_r>
 8004120:	4605      	mov	r5, r0
 8004122:	2800      	cmp	r0, #0
 8004124:	d0ed      	beq.n	8004102 <_realloc_r+0x1e>
 8004126:	42bc      	cmp	r4, r7
 8004128:	4622      	mov	r2, r4
 800412a:	4631      	mov	r1, r6
 800412c:	bf28      	it	cs
 800412e:	463a      	movcs	r2, r7
 8004130:	f7ff fed0 	bl	8003ed4 <memcpy>
 8004134:	4631      	mov	r1, r6
 8004136:	4640      	mov	r0, r8
 8004138:	f7ff fef4 	bl	8003f24 <_free_r>
 800413c:	e7e1      	b.n	8004102 <_realloc_r+0x1e>
 800413e:	4635      	mov	r5, r6
 8004140:	e7df      	b.n	8004102 <_realloc_r+0x1e>
	...

08004144 <_sbrk_r>:
 8004144:	b538      	push	{r3, r4, r5, lr}
 8004146:	4d06      	ldr	r5, [pc, #24]	; (8004160 <_sbrk_r+0x1c>)
 8004148:	2300      	movs	r3, #0
 800414a:	4604      	mov	r4, r0
 800414c:	4608      	mov	r0, r1
 800414e:	602b      	str	r3, [r5, #0]
 8004150:	f7fc fd6a 	bl	8000c28 <_sbrk>
 8004154:	1c43      	adds	r3, r0, #1
 8004156:	d102      	bne.n	800415e <_sbrk_r+0x1a>
 8004158:	682b      	ldr	r3, [r5, #0]
 800415a:	b103      	cbz	r3, 800415e <_sbrk_r+0x1a>
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	bd38      	pop	{r3, r4, r5, pc}
 8004160:	200002b8 	.word	0x200002b8

08004164 <__malloc_lock>:
 8004164:	4801      	ldr	r0, [pc, #4]	; (800416c <__malloc_lock+0x8>)
 8004166:	f000 b811 	b.w	800418c <__retarget_lock_acquire_recursive>
 800416a:	bf00      	nop
 800416c:	200002bc 	.word	0x200002bc

08004170 <__malloc_unlock>:
 8004170:	4801      	ldr	r0, [pc, #4]	; (8004178 <__malloc_unlock+0x8>)
 8004172:	f000 b80c 	b.w	800418e <__retarget_lock_release_recursive>
 8004176:	bf00      	nop
 8004178:	200002bc 	.word	0x200002bc

0800417c <_malloc_usable_size_r>:
 800417c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004180:	1f18      	subs	r0, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	bfbc      	itt	lt
 8004186:	580b      	ldrlt	r3, [r1, r0]
 8004188:	18c0      	addlt	r0, r0, r3
 800418a:	4770      	bx	lr

0800418c <__retarget_lock_acquire_recursive>:
 800418c:	4770      	bx	lr

0800418e <__retarget_lock_release_recursive>:
 800418e:	4770      	bx	lr

08004190 <_init>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	bf00      	nop
 8004194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004196:	bc08      	pop	{r3}
 8004198:	469e      	mov	lr, r3
 800419a:	4770      	bx	lr

0800419c <_fini>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr
